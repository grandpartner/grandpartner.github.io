{"version":3,"sources":["./src/finance-account-opening/account/margin/employment-status/employment-status.component.html","./src/finance-account-opening/account/margin/financial-investment-status/financial-investment-status.component.html","./src/finance-account-opening/account/margin/margin-account-form.component.html","./src/finance-account-opening/account/margin/navbar/navbar.component.html","./src/finance-account-opening/account/margin/other-disclosure/other-disclosure.component.html","./src/finance-account-opening/account/margin/personal/personal.component.html","./src/finance-account-opening/account/margin/select-account/select-account.component.html","./src/finance-account-opening/account/margin/data/formData.model.ts","./src/finance-account-opening/account/margin/data/formData.service.ts","./src/finance-account-opening/account/margin/employment-status/employment-status.component.ts","./src/finance-account-opening/account/margin/financial-investment-status/financial-investment-status.component.ts","./src/finance-account-opening/account/margin/margin-account-form.component.ts","./src/finance-account-opening/account/margin/margin-account-form.module.ts","./src/finance-account-opening/account/margin/margin-account-form.routing.ts","./src/finance-account-opening/account/margin/margin-account.service.ts","./src/finance-account-opening/account/margin/navbar/navbar.component.ts","./src/finance-account-opening/account/margin/other-disclosure/other-disclosure.component.ts","./src/finance-account-opening/account/margin/personal/personal.component.ts","./src/finance-account-opening/account/margin/select-account/select-account.component.ts","./src/finance-account-opening/account/margin/workflow/workflow-guard.service.ts","./src/finance-account-opening/account/margin/workflow/workflow.model.ts","./src/finance-account-opening/account/margin/workflow/workflow.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,qNAAsJ,OAAO,6VAA6V,0CAA0C,mqBAAmqB,QAAQ,ifAAif,mCAAmC,qoBAAqoB,sCAAsC,spBAAspB,sCAAsC,gqBAAgqB,QAAQ,g3B;;;;;;;;;;;;ACAjwH;AAAe,yNAA0J,OAAO,mdAAmd,oCAAoC,w6BAAw6B,QAAQ,ueAAue,4CAA4C,s7BAAs7B,QAAQ,seAAse,uCAAuC,qzBAAqzB,2CAA2C,28BAA28B,QAAQ,ufAAuf,2CAA2C,28BAA28B,QAAQ,qfAAqf,gDAAgD,29BAA29B,QAAQ,gfAAgf,qCAAqC,66BAA66B,QAAQ,k6BAAk6B,uCAAuC,ygCAAygC,QAAQ,4hBAA4hB,oDAAoD,0jCAA0jC,QAAQ,qiBAAqiB,uDAAuD,kjCAAkjC,QAAQ,+hBAA+hB,0CAA0C,69BAA69B,QAAQ,kgBAAkgB,iDAAiD,y9BAAy9B,QAAQ,8fAA8f,uCAAuC,i9BAAi9B,QAAQ,kdAAkd,8YAA8Y,0CAA0C,6gCAA6gC,QAAQ,0tBAA0tB,+I;;;;;;;;;;;;ACA1usB;AAAe,wGAAyC,i1BAAi1B,mBAAmB,iM;;;;;;;;;;;;ACA55B;AAAe,0UAA2Q,cAAc,wSAAwS,cAAc,kpC;;;;;;;;;;;;ACA9lB;AAAe,oNAAqJ,OAAO,yNAAyN,mDAAmD,g3BAAg3B,sCAAsC,2TAA2T,sCAAsC,o/BAAo/B,QAAQ,mhBAAmhB,kCAAkC,69BAA69B,QAAQ,qgBAAqgB,6BAA6B,+hBAA+hB,soBAAsoB,oCAAoC,s+BAAs+B,QAAQ,ycAAyc,6iBAA6iB,+I;;;;;;;;;;;;ACAn5P;AAAe,6MAA8I,OAAO,gXAAgX,mCAAmC,ylBAAylB,mCAAmC,6mBAA6mB,6BAA6B,olBAAolB,QAAQ,+cAA+c,4BAA4B,klBAAklB,+BAA+B,GAAG,8BAA8B,+mBAA+mB,QAAQ,6jBAA6jB,4CAA4C,yqBAAyqB,wCAAwC,wnBAAwnB,QAAQ,mfAAmf,0BAA0B,qsBAAqsB,kCAAkC,knBAAknB,QAAQ,qfAAqf,8BAA8B,gOAAgO,WAAW,2bAA2b,yCAAyC,gFAAgF,mRAAmR,sZAAsZ,+I;;;;;;;;;;;;ACAh5T;AAAe,kNAAmJ,OAAO,4TAA4T,yCAAyC,0zBAA0zB,oCAAoC,4jCAA4jC,OAAO,kOAAkO,OAAO,4hBAA4hB,+I;;;;;;;;;;;;;;;;;;;;;ACAprG;IAAA;QACI,yBAAyB;QACzB,gBAAW,GAAW,EAAE,CAAC;QACzB,gBAAW,GAAW,EAAE,CAAC;QACzB,YAAO,GAAY,CAAC,CAAC;QACrB,yBAAoB,GAAW,EAAE,CAAC;QAClC,WAAM,GAAW,CAAC,CAAC;QACnB,UAAK,GAAW,EAAE,CAAC;QACnB,qBAAgB,GAAW,CAAC,CAAC;QAC7B,QAAG,GAAW,EAAE,CAAC;QACjB,aAAQ,GAAW,CAAC,CAAC;QAErB,uBAAkB,GAAW,CAAC,CAAC,CAAC,SAAS;QAEzC,6BAA6B;QAC7B,uBAAkB,GAAW,CAAC,CAAC;QAC/B,gBAAW,GAAY,EAAE,CAAC;QAC1B,mBAAc,GAAW,EAAE,CAAC;QAC5B,oBAAe,GAAW,CAAC,CAAC;QAE5B,2CAA2C;QAC1C,WAAW;QACZ,iBAAY,GAAW,CAAC,CAAC;QACzB,mBAAc,GAAW,CAAC,CAAC;QAC3B,kBAAa,GAAW,CAAC,CAAC;QAC1B,wBAAmB,GAAW,CAAC,CAAC;QAChC,wBAAmB,GAAW,CAAC,CAAC;QAChC,2BAAsB,GAAW,CAAC,CAAC;QACnC,kBAAa,GAAW,CAAC,CAAC;QACzB,YAAY;QACb,UAAK,GAAW,CAAC,CAAC;QAClB,sBAAiB,GAAW,CAAC,CAAC;QAC9B,oBAAe,GAAW,CAAC,CAAC;QAC5B,aAAQ,GAAW,CAAC,CAAC;QACrB,YAAO,GAAW,CAAC,CAAC;QACpB,UAAK,GAAW,CAAC,CAAC;QAClB,uBAAkB,GAAW,CAAC,CAAC;QAE/B,4BAA4B;QAC5B,qBAAgB,GAAW,EAAE,CAAC;QAC9B,mBAAc,GAAW,CAAC,CAAC;QAC3B,eAAU,GAAW,CAAC,CAAC;QACvB,UAAK,GAAW,EAAE,CAAC;QACnB,iBAAY,GAAW,CAAC,CAAC;QAEzB,0BAA0B;QAC1B,sBAAiB,GAAW,EAAE,CAAC;QAC/B,gBAAW,GAAW,EAAE,CAAC;IA+C7B,CAAC;IA5CG,wBAAK,GAAL;QAEI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,OAAO,GAAI,CAAC,CAAC;QAClB,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAE/B,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAI,EAAE,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QAEzB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAE5B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QAEtB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAE1B,CAAC;IACL,eAAC;AAAD,CAAC;;AAED,SAAS;AACT;IAAA;QACI,gBAAW,GAAW,EAAE,CAAC;QACzB,gBAAW,GAAW,EAAE,CAAC;QACzB,YAAO,GAAY,CAAC,CAAC;QACrB,yBAAoB,GAAW,EAAE,CAAC;QAClC,WAAM,GAAW,CAAC,CAAC;QACnB,UAAK,GAAW,EAAE,CAAC;QACnB,qBAAgB,GAAW,CAAC,CAAC;QAC7B,QAAG,GAAW,EAAE,CAAC;QACjB,aAAQ,GAAW,CAAC,CAAC;QAErB,uBAAkB,GAAW,CAAC,CAAC,CAAC,SAAS;IAE7C,CAAC;IAAD,eAAC;AAAD,CAAC;;AAED,SAAS;AACT;IAAA;QACI,uBAAkB,GAAW,CAAC,CAAC;QAC/B,gBAAW,GAAY,EAAE,CAAC;QAC1B,mBAAc,GAAW,EAAE,CAAC;QAC5B,oBAAe,GAAW,CAAC,CAAC;IAChC,CAAC;IAAD,uBAAC;AAAD,CAAC;;AAED,SAAS;AACT;IAAA;QACI,WAAW;QACX,iBAAY,GAAW,CAAC,CAAC;QACzB,mBAAc,GAAW,CAAC,CAAC;QAC3B,kBAAa,GAAW,CAAC,CAAC;QAC1B,wBAAmB,GAAW,CAAC,CAAC;QAChC,wBAAmB,GAAW,CAAC,CAAC;QAChC,2BAAsB,GAAW,CAAC,CAAC;QACnC,kBAAa,GAAW,CAAC,CAAC;QAC1B,YAAY;QACZ,UAAK,GAAW,CAAC,CAAC;QAClB,sBAAiB,GAAW,CAAC,CAAC;QAC9B,oBAAe,GAAW,CAAC,CAAC;QAC5B,aAAQ,GAAW,CAAC,CAAC;QACrB,YAAO,GAAW,CAAC,CAAC;QACpB,UAAK,GAAW,CAAC,CAAC;QAClB,uBAAkB,GAAW,CAAC,CAAC;IACnC,CAAC;IAAD,6BAAC;AAAD,CAAC;;AAED,SAAS;AACT;IAAA;QACK,qBAAgB,GAAW,EAAE,CAAC;QAC9B,mBAAc,GAAW,CAAC,CAAC;QAC3B,eAAU,GAAW,CAAC,CAAC;QACvB,UAAK,GAAW,EAAE,CAAC;QACnB,iBAAY,GAAW,CAAC,CAAC;IAE9B,CAAC;IAAD,sBAAC;AAAD,CAAC;;AAED,SAAS;AACT;IAAA;QACM,sBAAiB,GAAW,EAAE,CAAC;QAC/B,gBAAW,GAAW,EAAE,CAAC;IAC/B,CAAC;IAAD,oBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;AC1J0C;AASX;AAE+B;AAEZ;AAGnD;IAUI,yBAAoB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAR5C,aAAQ,GAAa,IAAI,wDAAQ,EAAE,CAAC;QACpC,wBAAmB,GAAY,KAAK,CAAC;QACrC,gCAA2B,GAAY,KAAK,CAAC;QAC7C,sCAAiC,GAAY,KAAK,CAAC;QACnD,0BAAqB,GAAY,KAAK,CAAC;QACvC,gCAA2B,GAAY,KAAK,CAAC;QAC7C,sBAAiB,GAAY,KAAK,CAAC;IAG3C,CAAC;IAED,sBAAsB;IACtB,qCAAW,GAAX;QACI,IAAI,QAAQ,GAAa;YACrB,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW;YACtC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW;YACtC,OAAO,EAAG,IAAI,CAAC,QAAQ,CAAC,OAAO;YAC/B,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,oBAAoB;YACxD,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;YAC5B,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;YAC1B,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB;YAChD,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG;YACtB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAChC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;YAC9B,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB;SAEvD,CAAC;QACF,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,qCAAW,GAAX,UAAY,IAAc;QACtB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAC3D,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,QAAQ,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAC/D,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACvD,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QACrC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,8DAAK,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,mBAAmB;IACnB,6CAAmB,GAAnB;QACI,IAAI,gBAAgB,GAAqB;YACrC,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB;YACpD,WAAW,EAAG,IAAI,CAAC,QAAQ,CAAC,WAAW;YACvC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc;YAC5C,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;SACjD,CAAC;QACF,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAED,6CAAmB,GAAnB,UAAoB,IAAsB;QACtC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QACxC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAC3D,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QACnD,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAErD,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,8DAAK,CAAC,gBAAgB,CAAC,CAAC;IAC9D,CAAC;IAED,oCAAoC;IACpC,yDAA+B,GAA/B;QACI,IAAI,oBAAoB,GAA2B;YAC/C,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;YACxC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc;YAC5C,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa;YAC1C,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC,mBAAmB;YACtD,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC,mBAAmB;YACtD,sBAAsB,EAAE,IAAI,CAAC,QAAQ,CAAC,sBAAsB;YAC5D,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa;YAC1C,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;YAC1B,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB;YAClD,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;YAC9C,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAChC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;YAC9B,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;YAC1B,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB;SACvD,CAAC;QACF,OAAO,oBAAoB,CAAC;IAChC,CAAC;IAED,yDAA+B,GAA/B,UAAgC,IAA4B;QACxD,IAAI,CAAC,iCAAiC,GAAG,IAAI,CAAC;QAC9C,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QACnD,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACjD,IAAI,CAAC,QAAQ,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC7D,IAAI,CAAC,QAAQ,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC7D,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACjD,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACzD,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QACrD,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAC3D,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,8DAAK,CAAC,4BAA4B,CAAC,CAAC;IAC1E,CAAC;IAED,YAAY;IACZ,4CAAkB,GAAlB;QACI,IAAI,eAAe,GAAoB;YAClC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB;YAChD,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc;YAC5C,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU;YACpC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;YAC1B,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;SAC5C,CAAC;QACF,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,4CAAkB,GAAlB,UAAmB,IAAqB;QACpC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACvD,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QACnD,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QAC/C,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,8DAAK,CAAC,eAAe,CAAC,CAAC;IAC7D,CAAC;IAED,gBAAgB;IAChB,0CAAgB,GAAhB;QACI,IAAI,aAAa,GAAkB;YAC/B,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB;YAClD,WAAW,EAAG,IAAI,CAAC,QAAQ,CAAC,WAAW;SAC1C,CAAC;QACF,OAAO,aAAa,CAAC;IACzB,CAAC;IAED,0CAAgB,GAAhB,UAAiB,IAAmB;QAChC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QACxC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACzD,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,8DAAK,CAAC,aAAa,CAAC,CAAC;IAC3D,CAAC;IAGD,qCAAW,GAAX;QACI,8BAA8B;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,uCAAa,GAAb;QACI,qBAAqB;QACrB,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;QAClC,+DAA+D;QAC/D,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACjC,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;QACzC,IAAI,CAAC,iCAAiC,GAAG,KAAK,CAAC;QAC/C,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;QACnC,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;QACzC,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,qCAAW,GAAX;QACI,oFAAoF;QACpF,OAAO,IAAI,CAAC,mBAAmB;YACvB,IAAI,CAAC,2BAA2B;YAChC,IAAI,CAAC,iCAAiC;YACtC,IAAI,CAAC,qBAAqB;YAC1B,IAAI,CAAC,2BAA2B;IAC5C,CAAC;;gBAnKoC,0EAAe;;IAV3C,eAAe;QAD3B,gEAAU,EAAE;OACA,eAAe,CA8K3B;IAAD,sBAAC;CAAA;AA9K2B;;;;;;;;;;;;;;;;;;;;;AChB+B;AACF;AAGM;AACkB;AAOjF;IAII,mCAAoB,MAAc,EAAU,KAAqB,EACzD,SAAwB,EAAU,eAAgC;QADtD,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAgB;QACzD,cAAS,GAAT,SAAS,CAAe;QAAU,oBAAe,GAAf,eAAe,CAAiB;QAJ1E,UAAK,GAAG,mBAAmB,CAAC;IAK5B,CAAC;IAED,4CAAQ,GAAR;QACI,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,CAAC;IACvE,CAAC;IAED,wCAAI,GAAJ,UAAK,IAAS;QACV,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,gDAAY,GAAZ,UAAa,IAAS;QAClB,wBAAwB;QACpB,gCAAgC;QAChC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;QACnE,GAAG;IACP,CAAC;IAED,4CAAQ,GAAR,UAAS,IAAS;QACd,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjB,4BAA4B;YAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,iCAAiC,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;SACtF;IACL,CAAC;;gBA9B2B,sDAAM;gBAAiB,8DAAc;gBAC9C,6EAAa;gBAA2B,sEAAe;;IALjE,yBAAyB;QANrC,+DAAS,CAAE;YACR,QAAQ,EAAM,mBAAmB;YAChC,0RAAiD;;SAErD,CAAC;OAEW,yBAAyB,CAmCrC;IAAD,gCAAC;CAAA;AAnCqC;;;;;;;;;;;;;;;;;;;;;ACZ2C;AACxB;AAGM;AACkB;AAQjF;IAKI,sCAAoB,MAAc,EAAU,KAAqB,EACzD,SAAwB,EAAU,eAAgC;QADtD,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAgB;QACzD,cAAS,GAAT,SAAS,CAAe;QAAU,oBAAe,GAAf,eAAe,CAAiB;QAL1E,UAAK,GAAG,iCAAiC,CAAC;QAG1C,kBAAa,GAAa,EAAE,CAAC;IAG7B,CAAC;IAED,+CAAQ,GAAR;QACI,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,+BAA+B,EAAE,CAAC;IACvF,CAAC;IAED,2CAAI,GAAJ,UAAK,IAAS;QACV,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,OAAO,KAAK,CAAC;SAChB;QAED,IAAG,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,EAAC;YAC/B,OAAO,KAAK,CAAC;SACf;QAED,IAAI,CAAC,eAAe,CAAC,+BAA+B,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAChF,OAAO,IAAI,CAAC;IAEhB,CAAC;IAEA,mDAAY,GAAZ,UAAa,IAAS;QACnB,wBAAwB;QACpB,4BAA4B;QAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;QAC3E,GAAG;IACP,CAAC;IAED,+CAAQ,GAAR,UAAS,IAAS;QACd,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjB,4BAA4B;YAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;SACzE;IACL,CAAC;;gBAnC2B,sDAAM;gBAAiB,8DAAc;gBAC9C,6EAAa;gBAA2B,sEAAe;;IANjE,4BAA4B;QANxC,+DAAS,CAAE;YACR,QAAQ,EAAM,6BAA6B;YAC1C,wTAA2D;;SAE/D,CAAC;OAEW,4BAA4B,CAyCxC;IAAD,mCAAC;CAAA;AAzCwC;;;;;;;;;;;;;;;;;;;;ACbkB;AAGU;AAC+B;AAOpG;IAKI,oCAAoB,eAAgC,EAAS,gBAAwC;QAArG,iBAKC;QALmB,oBAAe,GAAf,eAAe,CAAiB;QAAS,qBAAgB,GAAhB,gBAAgB,CAAwB;QAJrG,UAAK,GAAG,mBAAmB,CAAC;QAG5B,qBAAgB,GAAY,IAAI,CAAC;QAE/B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,SAAS,CAAC,aAAG;YAC1E,KAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;QAEhC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6CAAQ,GAAR;QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QACnD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC;IACzC,CAAC;IAGD,gDAAW,GAAX;QACI,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;IAC3C,CAAC;;gBAfoC,sEAAe;gBAA2B,yGAAsB;;IAH5F;QAAR,2DAAK,EAAE;gEAAU;IAFT,0BAA0B;QANtC,+DAAS,CAAE;YACR,QAAQ,EAAM,uBAAuB;YACpC,4QAAmD;;SAEvD,CAAC;OAEW,0BAA0B,CAqBtC;IAAD,iCAAC;CAAA;AArBsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXY;AACC;AACL;AACgB;AACF;AAE7D,wBAAwB;AAC2C;AACyB;AACuB;AAC1B;AACN;AACN;AAC7E,oBAAoB;AAC6D;AAEpB;AACI;AACD;AAwBhE;IAAA;IAAsC,CAAC;IAA1B,uBAAuB;QAvBnC,8DAAQ,CAAC;YACN,OAAO,EAAC;gBACA,0DAAW;gBACX,4FAA8B;gBAC9B,4DAAY;gBACZ,kEAAY;aACb;YACP,YAAY,EAAE;gBACN,0FAA0B;gBAC1B,wEAAe;gBACf,8EAAiB;gBACjB,wGAAyB;gBACzB,+HAA4B;gBAC5B,qGAAwB;gBACxB,gGAAsB;aACxB;YACN,SAAS,EAAC;gBACN,uEAAe;gBACf,2EAAe;gBACf,6EAAoB;aACnB;SACR,CAAC;OAEW,uBAAuB,CAAG;IAAD,8BAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CiB;AACE;AAEc;AACuB;AACuB;AAC1B;AACN;AACN;AACJ;AAIlE,IAAM,SAAS,GAAW;IAC7B;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yFAA0B;QACrC,QAAQ,EAAE,CAAC;gBACT,IAAI,EAAE,EAAE;gBACR,QAAQ,EAAE;oBACR,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE;oBACvD,EAAG,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,8EAAiB,EAAE;oBACnD,EAAG,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,wGAAyB,EAAE,WAAW,EAAE,CAAC,8EAAa,CAAC,EAAE;oBACjG,EAAG,IAAI,EAAE,8BAA8B,EAAE,SAAS,EAAE,+HAA4B,EAAE,WAAW,EAAE,CAAC,8EAAa,CAAC,EAAE;oBAChH,EAAG,IAAI,EAAE,iBAAiB,EAAE,SAAS,EAAE,qGAAwB,EAAE,WAAW,EAAE,CAAC,8EAAa,CAAC,EAAE;oBAC/F,EAAG,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,+FAAsB,EAAE,WAAW,EAAE,CAAC,8EAAa,CAAC,EAAE;iBAC5F;aACF,CAAC;KACH;CACN,CAAC;AAQF;IAAA;IAA6C,CAAC;IAAjC,8BAA8B;QAN1C,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC3C,OAAO,EAAE,CAAC,4DAAY,CAAC;YACvB,SAAS,EAAE,CAAC,8EAAa,CAAC;SAC3B,CAAC;OAEW,8BAA8B,CAAG;IAAD,qCAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;ACrCA;AACqB;AACwB;AACJ;AAQpF;IAIE,8BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,cAAS,GAAG,IAAI,yFAAwB,EAAE,CAAC;IAEb,CAAC;IAEvC,6CAAc,GAAd,UAAe,QAAkB,EAClB,gBAAkC,EAClC,4BAAoD,EACpD,eAAgC,EAChC,aAA4B;QAJ3C,iBA0DC;QArDE,IAAM,GAAG,GAAG,qEAAW,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC;QAC7D,IAAI,IAAI,GAAG,IAAI,eAAe,EAAE,CAAC;QACjC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACnC,eAAe;QACf,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAClD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,2BAA2B,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QACpE,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,GAAG,CAAC,2BAA2B,EAAE,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,CAAC,uBAAuB,EAAE,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5E,IAAI,CAAC,GAAG,CAAC,uBAAuB,EAAE,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE1E,mBAAmB;QACnB,IAAI,CAAC,GAAG,CAAC,wBAAwB,EAAE,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACvD,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAC7D,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5E,qCAAqC;QACrC,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,4BAA4B,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7F,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,4BAA4B,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,GAAG,CAAC,yBAAyB,EAAE,4BAA4B,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjG,IAAI,CAAC,GAAG,CAAC,yBAAyB,EAAE,4BAA4B,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjG,IAAI,CAAC,GAAG,CAAC,wCAAwC,EAAE,4BAA4B,CAAC,sBAAsB,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnH,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,4BAA4B,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;QAErF,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,4BAA4B,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/E,IAAI,CAAC,GAAG,CAAC,kCAAkC,EAAE,4BAA4B,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxG,IAAI,CAAC,GAAG,CAAC,qCAAqC,EAAE,4BAA4B,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzG,IAAI,CAAC,GAAG,CAAC,wBAAwB,EAAE,4BAA4B,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrF,IAAI,CAAC,GAAG,CAAC,+BAA+B,EAAE,4BAA4B,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3F,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,4BAA4B,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/E,IAAI,CAAC,GAAG,CAAC,wBAAwB,EAAE,4BAA4B,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/F,kBAAkB;QAClB,IAAI,CAAC,GAAG,CAAC,kCAAkC,EAAE,eAAe,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,eAAe,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAClE,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,eAAe,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QACtE,gBAAgB;QAChB,IAAI,CAAC,GAAG,CAAC,wBAAwB,EAAE,aAAa,CAAC,iBAAiB,CAAC,CAAC;QACpE,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,aAAa,CAAC,WAAW,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,IAAI;aACZ,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE;YAC1B,OAAO,EAAE,IAAI,gEAAW,EAAE;iBACvB,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;SAC5D,CAAC;aACD,GAAG,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC;aACX,KAAK,CAAC,WAAC,IAAI,YAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,EAAhC,CAAgC,CAAC,CAAC;IACpD,CAAC;;gBA5DyB,+DAAU;;IAJzB,oBAAoB;QADhC,gEAAU,EAAE;OACA,oBAAoB,CAiEhC;IAAD,2BAAC;CAAA;AAjEgC;;;;;;;;;;;;;;;;;;ACXS;AAQ1C;IAAA;IAA8B,CAAC;IAAlB,eAAe;QAN3B,+DAAS,CAAE;YACR,QAAQ,EAAE,YAAY;YACrB,yPAAsC;;SAE1C,CAAC;OAEW,eAAe,CAAG;IAAD,sBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;ACRwB;AACK;AAGM;AACkB;AAOjF;IAQI,kCAAoB,MAAc,EAAU,KAAqB,EACzD,SAAwB,EAAU,eAAgC;QADtD,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAgB;QACzD,cAAS,GAAT,SAAS,CAAe;QAAU,oBAAe,GAAf,eAAe,CAAiB;QAR1E,UAAK,GAAG,mBAAmB,CAAC;QAM5B,6BAAwB,GAAa,EAAE,CAAC;IAGxC,CAAC;IAED,2CAAQ,GAAR;QACI,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE,CAAC;IACrE,CAAC;IAED,uCAAI,GAAJ,UAAK,IAAS;QACV,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,OAAO,KAAK,CAAC;SAChB;QACD,IAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,IAAE,CAAC,EAAC;YACxC,OAAO,KAAK,CAAC;SACf;QACD,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,+CAAY,GAAZ,UAAa,IAAS;QAClB,wBAAwB;QACpB,4BAA4B;QAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,iCAAiC,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;QACvF,GAAG;IACP,CAAC;IACD,2CAAQ,GAAR,UAAS,IAAS;QACd,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjB,4BAA4B;YAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;SACvE;IACL,CAAC;;gBA/B2B,sDAAM;gBAAiB,8DAAc;gBAC9C,6EAAa;gBAA2B,sEAAe;;IATjE,wBAAwB;QANpC,+DAAS,CAAE;YACR,QAAQ,EAAM,kBAAkB;YAC/B,uRAAgD;;SAEpD,CAAC;OAEW,wBAAwB,CAwCpC;IAAD,+BAAC;CAAA;AAxCoC;;;;;;;;;;;;;;;;;;;;;;;;ACZsB;AACF;AAGM;AACkB;AACJ;AACe;AACf;AAO7E;IAKI,2BAAoB,MAAc,EAAU,KAAqB,EACzD,SAAwB,EAAU,eAAgC,EAClE,UAA0B,EAAU,cAAkC;QAF1D,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAgB;QACzD,cAAS,GAAT,SAAS,CAAe;QAAU,oBAAe,GAAf,eAAe,CAAiB;QAClE,eAAU,GAAV,UAAU,CAAgB;QAAU,mBAAc,GAAd,cAAc,CAAoB;QAN9E,UAAK,GAAG,sBAAsB,CAAC;IAO/B,CAAC;IAED,oCAAQ,GAAR;QACI,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QAClD,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAC;YAClC,IAAI,GAAG,GAAG,IAAI,+EAAW,EAAE,CAAC;YAC5B,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC;YACpB,GAAG,CAAC,OAAO,GAAG,oCAAoC;YAClD,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACpC,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAED,gCAAI,GAAJ,UAAK,IAAS;QACV,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,oCAAQ,GAAR,UAAS,IAAS;QACd,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjB,4BAA4B;YAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;SAC1E;IACL,CAAC;;gBAhC2B,sDAAM;gBAAiB,8DAAc;gBAC9C,6EAAa;gBAA2B,sEAAe;gBACtD,+EAAc;gBAA0B,8FAAkB;;IAPrE,iBAAiB;QAN7B,+DAAS,CAAE;YACR,QAAQ,EAAM,UAAU;YACvB,+PAAwC;;SAE5C,CAAC;OAEW,iBAAiB,CAsC7B;IAAD,wBAAC;CAAA;AAtC6B;;;;;;;;;;;;;;;;;;;;;;;;;;ACf6B;AACF;AACgD;AAU1C;AACkB;AAChB;AACsC;AACP;AACf;AAQjF;IAcI,gCAAoB,MAAc,EAAU,KAAqB,EACzD,SAAwB,EAAU,eAAgC,EAClE,gBAAsC,EAAU,gBAAwC,EACxF,gBAAsC;QAH1B,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAgB;QACzD,cAAS,GAAT,SAAS,CAAe;QAAU,oBAAe,GAAf,eAAe,CAAiB;QAClE,qBAAgB,GAAhB,gBAAgB,CAAsB;QAAU,qBAAgB,GAAhB,gBAAgB,CAAwB;QACxF,qBAAgB,GAAhB,gBAAgB,CAAsB;QAhB9C,UAAK,GAAG,2BAA2B,CAAC;QAMpC,gBAAW,GAAY,KAAK,CAAC;QAE7B,8BAAyB,GAAa,EAAE,CAAC;QACzC,wBAAmB,GAAa,EAAE,CAAC;QAE5B,WAAM,GAAa,EAAE,CAAC;QACrB,cAAS,GAAG,IAAI,yFAAwB,EAAE,CAAC;IAMnD,CAAC;IAED,yCAAQ,GAAR;QACI,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC;QAC7D,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;IACpD,CAAC;IAED,qCAAI,GAAJ,UAAK,IAAS;QACV,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,OAAO,KAAK,CAAC;SAChB;QACD,IAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,IAAE,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,IAAE,CAAC,EAAC;YAC/E,OAAO,KAAK,CAAC;SACf;QACD,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,6CAAY,GAAZ,UAAa,IAAS;QAClB,wBAAwB;QACpB,4BAA4B;QAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,EAAC,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;QAC1E,GAAG;IACP,CAAC;IACD,2CAAU,GAAV,UAAW,IAAS;QAApB,iBAwBC;QAvBG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;YACnD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,CAAC;YACnE,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,eAAe,CAAC,+BAA+B,EAAE,CAAC;YAC3F,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE,CAAC;YACjE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC;YAC7D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;YACtD,IAAG,IAAI,CAAC,WAAW,EAAC;gBACjB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAC7C,IAAI,CAAC,gBAAgB;oBAChB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAChB,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,4BAA4B,EACjC,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,aAAG;oBAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACpB,KAAI,CAAC,aAAa,EAAE,CAAC;gBACvB,CAAC,EAAE,aAAG;oBACH,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAClB,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBACvB,CAAC,CAAC;aACrB;SACJ;IACL,CAAC;IAEO,8CAAa,GAArB;QACI,IAAI,aAAa,GAAG,IAAI,mFAAa,EAAE,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC9C,aAAa,CAAC,KAAK,GAAG,SAAS,CAAC;QAChC,aAAa,CAAC,OAAO,GAAG,oEAAoE,CAAC;QAC7F,aAAa,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAChD,4DAA4D;IAEhE,CAAC;IAEO,4CAAW,GAAnB,UAAoB,KAAY;QAAZ,oCAAY;QAC5B,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;aAAM;YACH,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACjD;SACJ;QACD,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAChC,CAAC;;gBA/E2B,sDAAM;gBAAiB,8DAAc;gBAC9C,6EAAa;gBAA2B,sEAAe;gBAChD,4EAAoB;gBAA4B,yGAAsB;gBACtE,kGAAoB;;IAjBrC,sBAAsB;QANlC,+DAAS,CAAE;YACR,QAAQ,EAAM,gBAAgB;YAC7B,iRAA8C;;SAElD,CAAC;OAEW,sBAAsB,CA+FlC;IAAD,6BAAC;CAAA;AA/FkC;;;;;;;;;;;;;;;;;;;;ACzBQ;AAMlB;AAE4B;AAGrD;IAEI,uBAAoB,MAAc,EAAU,eAAgC;QAAxD,WAAM,GAAN,MAAM,CAAQ;QAAU,oBAAe,GAAf,eAAe,CAAiB;IAAI,CAAC;IAEjF,mCAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACjE,IAAI,IAAI,GAAW,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,sCAAc,GAAd,UAAe,IAAI;QACf,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,GAAG,SAAS,CAAC,CAAC;QAE5C,6EAA6E;QAC7E,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAC/D,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,SAAS,GAAG,4CAA4C,CAAC,CAAC;YAC1F,IAAI,GAAG,GAAG,aAAW,IAAI,CAAC,YAAY,gCAA2B,SAAW,CAAC;YAC7E,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5B,OAAO,KAAK,CAAC;SAChB;QAAA,CAAC;QAEF,OAAO,IAAI,CAAC;IAChB,CAAC;;gBArB2B,sDAAM;gBAA2B,iEAAe;;IAFnE,aAAa;QADzB,gEAAU,EAAE;OACA,aAAa,CAwBzB;IAAD,oBAAC;CAAA;AAxByB;;;;;;;;;;;;;;;;;ACXnB,IAAM,KAAK,GAAG;IACjB,QAAQ,EAAE,UAAU;IACpB,gBAAgB,EAAE,kBAAkB;IACpC,4BAA4B,EAAE,8BAA8B;IAC5D,eAAe,EAAE,iBAAiB;IAClC,aAAa,EAAE,eAAe;CACjC;;;;;;;;;;;;;;;;;;;ACNkD;AAEG;AAGtD;IADA;QAEY,aAAQ,GAAG;YACf,EAAE,IAAI,EAAE,qDAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;YACtC,EAAE,IAAI,EAAE,qDAAK,CAAC,gBAAgB,EAAE,KAAK,EAAE,KAAK,EAAE;YAC9C,EAAE,IAAI,EAAE,qDAAK,CAAC,4BAA4B,EAAE,KAAK,EAAE,KAAK,EAAE;YAC1D,EAAE,IAAI,EAAE,qDAAK,CAAC,eAAe,EAAE,KAAK,EAAE,KAAK,EAAE;YAC7C,EAAE,IAAI,EAAE,qDAAK,CAAC,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE;SAC9C,CAAC;IAsCN,CAAC;IApCG,sCAAY,GAAZ,UAAa,IAAY;QACrB,sDAAsD;QACtD,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACrD,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBAChC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;aACzC;SACJ;IACL,CAAC;IAED,oCAAU,GAAV;QACI,oDAAoD;QACpD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,iBAAO;YACzB,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6CAAmB,GAAnB,UAAoB,IAAY;QAC5B,wDAAwD;QACxD,2CAA2C;QAC3C,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE;YAC9D,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;gBACpB,KAAK,GAAG,IAAI,CAAC;gBACb,cAAc,GAAG,EAAE,CAAC;aACvB;iBACI;gBACD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACnB,cAAc,GAAG,IAAI,CAAC,IAAI;aAC7B;SACJ;QACD,OAAO,cAAc,CAAC;IAC1B,CAAC;IA5CQ,eAAe;QAD3B,gEAAU,EAAE;OACA,eAAe,CA6C3B;IAAD,sBAAC;CAAA;AA7C2B","file":"finance-account-opening-account-margin-margin-account-form-module.js","sourcesContent":["export default \"<form #employmentStatusForm=\\\"ngForm\\\" class=\\\"editForm\\\" novalidate>\\n    <div class=\\\"tab-pane active\\\">\\n        <h4 class=\\\"head text-center\\\">{{title}}</h4>\\n        <br/>\\n        <div class='row'>\\n            <div class='col-md-12'>\\n                <div class=\\\"row\\\">\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"professionalStatus\\\">\\n                             {{lookupSvc.txt('professional_status_txt')}}</label> \\n                                <div class=\\\"group selectOtn\\\"> \\n                                    <select class=\\\"form-control\\\" required name=\\\"professionalStatus\\\" #professionalStatus=\\\"ngModel\\\" [(ngModel)]=\\\"employmentStatus.professionalStatus\\\" required=\\\"true\\\">\\n                                         <option class=\\\"option\\\" value=\\\"0\\\" disabled=\\\"true\\\" selected=\\\"true\\\">Select status</option>\\n                                        <option class=\\\"option\\\"\\n                                            *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrProfessionalStatus')\\\"\\n                                            [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                    </select>\\n                                </div>\\n\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"employmentStatusForm.submitted && professionalStatus.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"companyName\\\">{{lookupSvc.txt('company_name_txt')}}</label>  \\n                            <input #companyName=\\\"ngModel\\\" required id=\\\"companyName\\\" name=\\\"companyName\\\" type=\\\"text\\\" placeholder=\\\"Company name\\\" [(ngModel)]=\\\"employmentStatus.companyName\\\" pInputText>\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"employmentStatusForm.submitted && companyName.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"carrerPosition\\\">\\n                            {{lookupSvc.txt('career_position_txt')}}</label>  \\n                            <input #carrerPosition=\\\"ngModel\\\" required id=\\\"carrerPosition\\\" name=\\\"carrerPosition\\\" type=\\\"text\\\" placeholder=\\\"Career position\\\" [(ngModel)]=\\\"employmentStatus.carrerPosition\\\" pInputText>\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"employmentStatusForm.submitted && carrerPosition.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"bussinessNature\\\">\\n                          {{lookupSvc.txt('business_nature_txt')}} </label>  \\n                               <div class=\\\"group selectOtn\\\"> \\n                                    <select class=\\\"form-control\\\" required name=\\\"bussinessNature\\\" #bussinessNature=\\\"ngModel\\\" [(ngModel)]=\\\"employmentStatus.bussinessNature\\\" required=\\\"true\\\">\\n                                         <option class=\\\"option\\\" value=\\\"0\\\" disabled=\\\"true\\\" selected=\\\"true\\\">Select business nature</option>\\n                                        <option class=\\\"option\\\"\\n                                            *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrBusinessNature')\\\"\\n                                            [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                    </select>\\n                                </div>          \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"employmentStatusForm.submitted && bussinessNature.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-group text-center space-20\\\">\\n                   <button class=\\\"primary actionnext\\\" style=\\\"width: 50%\\\" (click)=\\\"goToPrevious(employmentStatusForm)\\\"> <span  class=\\\"glyphicon glyphicon-arrow-left\\\"></span> Previous</button>\\n                    <button class=\\\"primary actionnext\\\" style=\\\"width: 50%\\\"  (click)=\\\"goToNext(employmentStatusForm)\\\"> Next <span class=\\\"glyphicon glyphicon-arrow-right\\\"></span></button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</form>\"","export default \"<form #investmentExperienceForm=\\\"ngForm\\\" class=\\\"editForm\\\" novalidate>\\n    <div class=\\\"tab-pane active\\\">\\n        <h4 class=\\\"head text-center\\\">{{title}}</h4>\\n        <br/>\\n        <div class=\\\"row\\\">\\n        <div class='col-md-12'>\\n            <h6 class=\\\"subTitle\\\">Personal finances</h6>\\n        </div>\\n        </div>\\n      <div class='row mt-3'>\\n          <div class='col-md-12'>\\n            <div class=\\\"row\\\">\\n               <div class='col-xs-12 col-sm-6'>\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"annualIncome\\\">\\n                       {{lookupSvc.txt('annual_income_txt')}}</label> \\n                       <div class=\\\"group selectOtn\\\"> \\n                          <select class=\\\"form-control\\\"\\n                                    id=\\\"annualIncome\\\"  \\n                                    required \\n                                    name=\\\"annualIncome\\\" \\n                                    #annualIncome=\\\"ngModel\\\" \\n                                    [(ngModel)]=\\\"investmentExperience.annualIncome\\\" \\n                                    >\\n                            <option class=\\\"option\\\" \\n                                     value=\\\"0\\\" \\n                                     disabled=\\\"true\\\" \\n                                     >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrAnnualIncome')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                         </select>\\n                        </div>             \\n                         <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && annualIncome.invalid\\\">*Required</div>\\n                    </div>\\n                </div>\\n               <div class='col-xs-12 col-sm-6'>\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"totalNetAssets\\\">\\n                         {{lookupSvc.txt('total_net_asset_value_txt')}}</label> \\n                       <div class=\\\"group selectOtn\\\"> \\n                          <select class=\\\"form-control\\\"\\n                                    id=\\\"totalNetAssets\\\"  \\n                                    required \\n                                    name=\\\"totalNetAssets\\\" \\n                                    #totalNetAssets=\\\"ngModel\\\" \\n                                    [(ngModel)]=\\\"investmentExperience.totalNetAssets\\\" \\n                                    >\\n                            <option class=\\\"option\\\" \\n                                     value=\\\"0\\\" \\n                                     disabled=\\\"true\\\" \\n                                     >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrTotalNetAssetValue')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                         </select>\\n                        </div>             \\n                         <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && totalNetAssets.invalid\\\">*Required</div>\\n                    </div>\\n                </div>\\n               <div class='col-xs-12 col-sm-6'>\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"sourceOfFunds\\\">\\n                       {{lookupSvc.txt('sources_of_found_txt')}}</label> \\n                     <div class=\\\"form-group accountForm\\\">\\n                     <p-checkbox name=\\\"disclosure\\\" *ngFor=\\\"let item of lookupSvc.getAttributeValues('attrSourcesOfFund')\\\" \\n                     [value]=\\\"item.id\\\" [label]=\\\"item.name\\\" (onChange)=\\\"investmentExperience.sourceOfFunds=sourceOfFunds.toString()\\\" [(ngModel)]=\\\"sourceOfFunds\\\"></p-checkbox>\\n                      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && sourceOfFunds.length==0\\\">*Required</div>\\n                   </div>            \\n                    </div>\\n                </div>\\n                <div class='col-xs-12 col-sm-6'>\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"investmentKnowledge\\\">\\n                       {{lookupSvc.txt('investment_knowledge_txt')}}</label> \\n                       <div class=\\\"group selectOtn\\\"> \\n                          <select class=\\\"form-control\\\"\\n                                    id=\\\"investmentKnowledge\\\"  \\n                                    required \\n                                    name=\\\"investmentKnowledge\\\" \\n                                    #investmentKnowledge=\\\"ngModel\\\" \\n                                    [(ngModel)]=\\\"investmentExperience.investmentKnowledge\\\" \\n                                    >\\n                            <option class=\\\"option\\\" \\n                                     value=\\\"0\\\" \\n                                     disabled=\\\"true\\\" \\n                                     >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrInvestmentKnowledge')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                         </select>\\n                        </div>             \\n                         <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && investmentKnowledge.invalid\\\">*Required</div>\\n                    </div>\\n                </div>\\n               <div class='col-xs-12 col-sm-6'>\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"investmentObjective\\\">\\n                             {{lookupSvc.txt('investment_objective_txt')}}</label> \\n                       <div class=\\\"group selectOtn\\\"> \\n                          <select class=\\\"form-control\\\"\\n                                    id=\\\"investmentObjective\\\"  \\n                                    required \\n                                    name=\\\"investmentObjective\\\" \\n                                    #investmentObjective=\\\"ngModel\\\" \\n                                    [(ngModel)]=\\\"investmentExperience.investmentObjective\\\" \\n                                    >\\n                            <option class=\\\"option\\\" \\n                                     value=\\\"0\\\" \\n                                     disabled=\\\"true\\\" \\n                                     >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrInvestmentObjective')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                         </select>\\n                        </div>             \\n                         <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && investmentObjective.invalid\\\">*Required</div>\\n                    </div>\\n                </div>\\n               <div class='col-xs-12 col-sm-6'>\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"frequencyOfTransaction\\\">\\n                        {{lookupSvc.txt('frequency_of_transactions_txt')}}</label> \\n                       <div class=\\\"group selectOtn\\\"> \\n                          <select class=\\\"form-control\\\"\\n                                    id=\\\"frequencyOfTransaction\\\"  \\n                                    required \\n                                    name=\\\"frequencyOfTransaction\\\" \\n                                    #frequencyOfTransaction=\\\"ngModel\\\" \\n                                    [(ngModel)]=\\\"investmentExperience.frequencyOfTransaction\\\" \\n                                    >\\n                            <option class=\\\"option\\\" \\n                                     value=\\\"0\\\" \\n                                     disabled=\\\"true\\\" \\n                                     >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrFrequencyOfTransactions')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                         </select>\\n                        </div>             \\n                         <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && frequencyOfTransaction.invalid\\\">*Required</div>\\n                    </div>\\n                </div>\\n               <div class='col-xs-12 col-sm-6'>\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"riskTolerance\\\">\\n                         {{lookupSvc.txt('risk_tolerance_txt')}}</label> \\n                       <div class=\\\"group selectOtn\\\"> \\n                          <select class=\\\"form-control\\\"\\n                                    id=\\\"riskTolerance\\\"  \\n                                    required \\n                                    name=\\\"riskTolerance\\\" \\n                                    #riskTolerance=\\\"ngModel\\\" \\n                                    [(ngModel)]=\\\"investmentExperience.riskTolerance\\\" \\n                                    >\\n                            <option class=\\\"option\\\" \\n                                     value=\\\"0\\\" \\n                                     disabled=\\\"true\\\" \\n                                     >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrRiskTolerance')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                         </select>\\n                        </div>             \\n                         <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && riskTolerance.invalid\\\">*Required</div>\\n                    </div>\\n                </div>                                                                                               \\n               </div>\\n             </div> \\n        </div>  \\n        <div class=\\\"row mt-3\\\">\\n        <div class='col-md-12'>\\n            <h6 class=\\\"subTitle\\\">Investment experience</h6>\\n        </div>\\n        </div>\\n        <div class='row mt-3'>\\n            <div class='col-md-12'>\\n                <div class=\\\"row\\\">\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"stock\\\">\\n                              {{lookupSvc.txt('stock_experience_txt')}}</label> \\n                               <div class=\\\"group selectOtn\\\"> \\n                                    <select class=\\\"form-control\\\"\\n                                            id=\\\"stock\\\"  \\n                                            required \\n                                            name=\\\"stock\\\" \\n                                            #stock=\\\"ngModel\\\" \\n                                            [(ngModel)]=\\\"investmentExperience.stock\\\" \\n                                            >\\n                                         <option class=\\\"option\\\" \\n                                                 value=\\\"0\\\" \\n                                                 disabled=\\\"true\\\" \\n                                                 >Select</option>\\n                                         <option class=\\\"option\\\"\\n                                            *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrExperience')\\\"\\n                                            [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                    </select>\\n                               </div>             \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && stock.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                         <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"structuredProduct\\\">\\n                                {{lookupSvc.txt('structured_product_experience_txt')}}</label> \\n                                <div class=\\\"group selectOtn\\\"> \\n                                    <select class=\\\"form-control\\\" \\n                                            id=\\\"structuredProduct\\\" \\n                                            required \\n                                            name=\\\"structuredProduct\\\" \\n                                            #structuredProduct=\\\"ngModel\\\" \\n                                            [(ngModel)]=\\\"investmentExperience.structuredProduct\\\" \\n                                            >\\n                                         <option class=\\\"option\\\" \\n                                                 value=\\\"0\\\" \\n                                                 disabled=\\\"true\\\" \\n                                                 >Select</option>\\n                                         <option class=\\\"option\\\"\\n                                            *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrExperience')\\\"\\n                                            [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                    </select>\\n                               </div>              \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && structuredProduct.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"foreignCurrency\\\">\\n                               {{lookupSvc.txt('foreign_currency_gold_experience_txt')}}</label> \\n                                <div class=\\\"group selectOtn\\\"> \\n                                    <select class=\\\"form-control\\\" \\n                                            id=\\\"foreignCurrency\\\" \\n                                            required \\n                                            name=\\\"foreignCurrency\\\" \\n                                            #foreignCurrency=\\\"ngModel\\\" \\n                                            [(ngModel)]=\\\"investmentExperience.foreignCurrency\\\" \\n                                            >\\n                                         <option class=\\\"option\\\" \\n                                                 value=\\\"0\\\" \\n                                                 disabled=\\\"true\\\" \\n                                                 >Select</option>\\n                                         <option class=\\\"option\\\"\\n                                            *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrExperience')\\\"\\n                                            [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                    </select>\\n                               </div>             \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && foreignCurrency.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"warrants\\\">\\n                                   {{lookupSvc.txt('warrants_experience_txt')}}</label> \\n                              <div class=\\\"group selectOtn\\\"> \\n                                 <select class=\\\"form-control\\\" \\n                                        id=\\\"warrants\\\" \\n                                        required \\n                                        name=\\\"warrants\\\" \\n                                        #warrants=\\\"ngModel\\\" \\n                                        [(ngModel)]=\\\"investmentExperience.warrants\\\" \\n                                        >\\n                                     <option class=\\\"option\\\" \\n                                             value=\\\"0\\\" \\n                                             disabled=\\\"true\\\" \\n                                             >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrExperience')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                 </select>\\n                              </div> \\n\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && warrants.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                  <div class='col-xs-12 col-sm-6'>\\n                      <div class=\\\"form-group\\\">\\n                           <label class=\\\"control-label\\\" for=\\\"futures\\\">\\n                                  {{lookupSvc.txt('futures_options_experience_txt')}}</label> \\n                              <div class=\\\"group selectOtn\\\"> \\n                                 <select class=\\\"form-control\\\" \\n                                        id=\\\"futures\\\" \\n                                        required \\n                                        name=\\\"futures\\\" \\n                                        #futures=\\\"ngModel\\\" \\n                                        [(ngModel)]=\\\"investmentExperience.futures\\\" \\n                                        >\\n                                     <option class=\\\"option\\\" \\n                                             value=\\\"0\\\" \\n                                             disabled=\\\"true\\\" \\n                                             >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrExperience')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                 </select>\\n                              </div>          \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && futures.invalid\\\">*Required</div>\\n                      </div>\\n                  </div>\\n                  <div class='col-xs-12 col-sm-6'>\\n                      <div class=\\\"form-group\\\">\\n                           <label class=\\\"control-label\\\" for=\\\"other\\\">\\n                              {{lookupSvc.txt('other_experience_txt')}}</label> \\n                              <div class=\\\"group selectOtn\\\"> \\n                                 <select class=\\\"form-control\\\" \\n                                        id=\\\"other\\\" \\n                                        required \\n                                        name=\\\"other\\\" \\n                                        #other=\\\"ngModel\\\" \\n                                        [(ngModel)]=\\\"investmentExperience.other\\\" \\n                                        >\\n                                     <option class=\\\"option\\\" \\n                                             value=\\\"0\\\" \\n                                             disabled=\\\"true\\\" \\n                                             >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrExperience')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                 </select>\\n                              </div>          \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && other.invalid\\\">*Required</div>\\n                      </div>\\n                  </div>\\n                </div>\\n                  <div class=\\\"row mb-3\\\">\\n                    <div class=\\\"col-md-12\\\">\\n                      <span style=\\\"color: #949494;\\\">Derivatives Warrants / CBBCs / ETF / Options, etc.) Cognitive Evaluation</span>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"row\\\">\\n                   <div class='col-xs-12 col-sm-6'>\\n                      <div class=\\\"form-group\\\">\\n                           <label class=\\\"control-label\\\" for=\\\"derivativesTrading\\\">\\n                             {{lookupSvc.txt('derivatives_trading_txt')}}</label> \\n                              <div class=\\\"group selectOtn\\\"> \\n                                 <select class=\\\"form-control\\\" \\n                                        id=\\\"derivativesTrading\\\" \\n                                        required \\n                                        name=\\\"derivativesTrading\\\" \\n                                        #derivativesTrading=\\\"ngModel\\\" \\n                                        [(ngModel)]=\\\"investmentExperience.derivativesTrading\\\" \\n                                        >\\n                                     <option class=\\\"option\\\" \\n                                             value=\\\"0\\\" \\n                                             disabled=\\\"true\\\" \\n                                             >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrDerivativesTrading')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                 </select>\\n                              </div>           \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"investmentExperienceForm.submitted && derivativesTrading.invalid\\\">*Required</div>\\n                      </div>\\n                  </div>\\n                </div>\\n                <div class=\\\"form-group text-center\\\">\\n                    <button class=\\\"primary actionnext\\\" style=\\\"width: 50%\\\" (click)=\\\"goToPrevious(investmentExperienceForm)\\\"> <span  class=\\\"glyphicon glyphicon-arrow-left\\\"></span> Previous</button>\\n                    <button class=\\\"primary\\\"  (click)=\\\"goToNext(investmentExperienceForm)\\\"> Next <span style=\\\"margin-left:10px;\\\" class=\\\"glyphicon glyphicon-arrow-right\\\"></span></button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</form>\"","export default \"\\r\\n<section style=\\\"background:#efefe9;\\\">\\r\\n    <div class=\\\"container\\\" style=\\\"z-index: unset\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-3\\\"> \\r\\n            <div class=\\\"box arrow-right\\\">\\r\\n              Margin Account\\r\\n            </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-9\\\">\\r\\n            <div class=\\\"board\\\">\\r\\n            <!-- Navigation Area (Circular Tabs) -->\\r\\n            <msw-navbar></msw-navbar>\\r\\n            <!-- End Navigation Area (Circular Tabs) -->\\r\\n  \\r\\n            <!-- Content Area -->\\r\\n            <div class=\\\"tab-content\\\">\\r\\n                <!-- Nested view  -->\\r\\n                <router-outlet></router-outlet>\\r\\n            </div>\\r\\n            <!-- End Content Area -->\\r\\n           </div>\\r\\n              <!-- For Debugging: show our valid formData -->\\r\\n             <!--    <pre>{{ formData | json }}</pre> -->\\r\\n            </div>\\r\\n            \\r\\n        </div>\\r\\n   \\r\\n  \\r\\n     \\r\\n    </div>\\r\\n  </section>\\r\\n  <success-dialog></success-dialog>\\r\\n  <error-dialog></error-dialog>\"","export default \"<div class=\\\"board-inner\\\" id=\\\"status-buttons\\\">\\n    <ul class=\\\"nav nav-tabs\\\" id=\\\"myTab\\\">\\n        <div class=\\\"liner\\\"></div>\\n                    \\n        <li>\\n            <a routerLink=\\\"personal\\\" routerLinkActive=\\\"active\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\" data-toggle=\\\"tab\\\" title=\\\"personal\\\">\\n                <span class=\\\"round-tabs three\\\">\\n                    1\\n                </span>\\n            </a>\\n        </li>\\n\\n        <li>\\n            <a routerLink=\\\"employmentStatus\\\" routerLinkActive=\\\"active\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\" data-toggle=\\\"tab\\\" title=\\\"employment status\\\">\\n                <span class=\\\"round-tabs three\\\">\\n                    2\\n                </span>\\n            </a>\\n        </li>\\n\\n\\n        <li>\\n            <a routerLink=\\\"financialAndInvestmentStatus\\\" routerLinkActive=\\\"active\\\" data-toggle=\\\"tab\\\" title=\\\"Financial and investment status\\\">\\n                <span class=\\\"round-tabs three\\\">\\n                   3\\n                </span>\\n            </a>\\n        </li>\\n\\n\\n        <li>\\n            <a routerLink=\\\"otherDisclosure\\\" routerLinkActive=\\\"active\\\" data-toggle=\\\"tab\\\" title=\\\"Disclosure\\\">\\n                <span class=\\\"round-tabs three\\\">\\n                  4\\n                </span>\\n            </a>\\n        </li>\\n\\n         <li>\\n            <a routerLink=\\\"selectAccount\\\" routerLinkActive=\\\"active\\\" data-toggle=\\\"tab\\\" title=\\\"Account\\\">\\n                <span class=\\\"round-tabs three\\\">\\n                  5\\n                </span>\\n            </a>\\n        </li>\\n                \\n    </ul>\\n    <div class=\\\"clearfix\\\"></div>\\n</div>\\n\\n<!-- Close the Splash screen -->\\n<script src=\\\"assets/js/loading-bars.js\\\"></script>\"","export default \"<form #otherDisclosureForm=\\\"ngForm\\\" class=\\\"editForm\\\" novalidate>\\n    <div class=\\\"tab-pane active\\\">\\n        <h4 class=\\\"head text-center\\\">{{title}}</h4>\\n        <br/>\\n        <div class='row'>\\n            <div class='col-md-12'>\\n               <div class=\\\"row mb-3\\\">\\n                  <div class=\\\"col-md-12\\\">\\n                   <h6 class=\\\"subTitle\\\"> {{lookupSvc.txt('other_information_disclosure_txt')}}</h6>\\n                  </div>\\n                </div>\\n              <div class=\\\"row\\\">\\n                 <div class='col-md-12'>\\n                  <div class=\\\"form-group accountForm\\\">\\n                     <p-checkbox name=\\\"disclosure\\\" *ngFor=\\\"let item of lookupSvc.getAttributeValues('attrTaxInformation')\\\" \\n                     [value]=\\\"item.id\\\" [label]=\\\"item.name\\\" (onChange)=\\\"otherDisclosure.otherInformation=selectedDisclosureValues.toString()\\\" [(ngModel)]=\\\"selectedDisclosureValues\\\"></p-checkbox>\\n                      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"otherDisclosureForm.submitted && selectedDisclosureValues.length==0\\\">*Required</div>\\n                   </div>\\n                </div>\\n              </div>\\n                <div class=\\\"row mb-3\\\">\\n                  <div class=\\\"col-md-12\\\">\\n                    <h6 class=\\\"subTitle\\\">{{lookupSvc.txt('tax_information_txt')}}</h6>\\n                  </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"taxInformation\\\">\\n                            {{lookupSvc.txt('tax_information_txt')}}</label> \\n                              <div class=\\\"group selectOtn\\\"> \\n                                 <select class=\\\"form-control\\\" \\n                                        id=\\\"taxInformation\\\" \\n                                        required \\n                                        name=\\\"taxInformation\\\" \\n                                        #taxInformation=\\\"ngModel\\\" \\n                                        [(ngModel)]=\\\"otherDisclosure.taxInformation\\\" \\n                                        >\\n                                     <option class=\\\"option\\\" \\n                                             value=\\\"0\\\" \\n                                             disabled=\\\"true\\\" \\n                                             >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrTaxInformation')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                 </select>\\n                              </div>            \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"otherDisclosureForm.submitted && taxInformation.invalid\\\">*Required</div>\\n                        </div>\\n                      </div>\\n                      <div class='col-xs-12 col-sm-6'>\\n                       <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"taxCountry\\\">\\n                             {{lookupSvc.txt('tax_country_txt')}}</label> \\n                              <div class=\\\"group selectOtn\\\"> \\n                                 <select class=\\\"form-control\\\" \\n                                        id=\\\"taxCountry\\\" \\n                                        required \\n                                        name=\\\"taxCountry\\\" \\n                                        #taxCountry=\\\"ngModel\\\" \\n                                        [(ngModel)]=\\\"otherDisclosure.taxCountry\\\" \\n                                        >\\n                                     <option class=\\\"option\\\" \\n                                             value=\\\"0\\\" \\n                                             disabled=\\\"true\\\" \\n                                             >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrCountry')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                 </select>\\n                              </div> \\n\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"otherDisclosureForm.submitted && taxCountry.invalid\\\">*Required</div>\\n                        </div> \\n                      </div>\\n                       <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"taxId\\\">\\n                              {{lookupSvc.txt('tax_id_txt')}} </label> \\n                                <input #taxId=\\\"ngModel\\\" required id=\\\"taxId\\\" name=\\\"taxId\\\" type=\\\"text\\\" placeholder=\\\"Tax ID\\\" [(ngModel)]=\\\"otherDisclosure.taxId\\\" pInputText>\\n\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"otherDisclosureForm.submitted && taxId.invalid\\\">*Required</div>\\n                        </div> \\n                      </div> \\n                </div>\\n                <div class=\\\"row\\\">\\n                <div class='col-md-12'>\\n                  <p style=\\\"color: #949494;\\\">A tax resident is a tax resident in a certain place because he has a resident status in a certain place and is responsible for paying taxes locally.</p>\\n                </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                <div class='col-md-12'>\\n                    <h6 class=\\\"subTitle\\\">W-8BEN</h6>\\n                </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class='col-xs-12 col-sm-6'>\\n                          <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"w8benCountry\\\">\\n                             {{lookupSvc.txt('w8ben_country_txt')}} </label> \\n                              <div class=\\\"group selectOtn\\\"> \\n                                 <select class=\\\"form-control\\\" \\n                                        id=\\\"w8benCountry\\\" \\n                                        required \\n                                        name=\\\"w8benCountry\\\" \\n                                        #w8benCountry=\\\"ngModel\\\" \\n                                        [(ngModel)]=\\\"otherDisclosure.w8benCountry\\\" \\n                                        >\\n                                     <option class=\\\"option\\\" \\n                                             value=\\\"0\\\" \\n                                             disabled=\\\"true\\\" \\n                                             >Select</option>\\n                                     <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrCountry')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                 </select>\\n                              </div>          \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"otherDisclosureForm.submitted && w8benCountry.invalid\\\">*Required</div>\\n                        </div> \\n                      </div>\\n                </div>\\n\\n                <div class=\\\"row\\\">\\n                <div class='col-md-12'>\\n                  <p style=\\\"color: #949494;\\\">Your country or territory is within the meaning of the income tax agreement between the United States and that country.</p>\\n                </div>\\n                </div>\\n                <div class=\\\"form-group text-center\\\">\\n                   <button class=\\\"primary actionnext\\\" style=\\\"width: 50%\\\" (click)=\\\"goToPrevious(otherDisclosureForm)\\\"> <span  class=\\\"glyphicon glyphicon-arrow-left\\\"></span> Previous</button>\\n                    <button class=\\\"primary\\\"  (click)=\\\"goToNext(otherDisclosureForm)\\\"> Next <span style=\\\"margin-left:10px;\\\" class=\\\"glyphicon glyphicon-arrow-right\\\"></span></button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</form>\"","export default \"<form #personalForm=\\\"ngForm\\\" class=\\\"editForm\\\" novalidate>\\n    <div class=\\\"tab-pane active\\\">\\n        <h4 class=\\\"head text-center\\\">{{title}}</h4>\\n        <h6 class=\\\"subTitle\\\">Identity information</h6>\\n        <br/>\\n        <div class='row'>\\n            <div class='col-md-12'>\\n                <div class=\\\"row\\\">\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"chineseName\\\">{{lookupSvc.txt('chinese_name_txt')}}</label>  \\n                            <input  #chineseName=\\\"ngModel\\\" required id=\\\"chineseName\\\" name=\\\"chineseName\\\" type=\\\"text\\\" placeholder=\\\"Chinese name\\\" [(ngModel)]=\\\"personal.chineseName\\\" pInputText >   \\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"personalForm.submitted && chineseName.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"englishName\\\">{{lookupSvc.txt('english_name_txt')}}</label>  \\n                            <input #englishName=\\\"ngModel\\\" required id=\\\"englishName\\\" name=\\\"englishName\\\" type=\\\"text\\\" placeholder=\\\"English name\\\" [(ngModel)]=\\\"personal.englishName\\\" pInputText>\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"personalForm.submitted && englishName.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"gender\\\">\\n                            {{lookupSvc.txt('gender_txt')}}</label>  \\n                            <div class=\\\"group selectOtn\\\"> \\n                                <select class=\\\"form-control\\\" required name=\\\"gender\\\" #gender=\\\"ngModel\\\" [(ngModel)]=\\\"personal.gender\\\" required=\\\"true\\\">\\n                                     <option class=\\\"option\\\" value=\\\"0\\\" disabled=\\\"true\\\" selected=\\\"true\\\">Select gender</option>\\n                                    <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrGender')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                </select>\\n                            </div>\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"personalForm.submitted && gender.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>  \\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"email\\\">{{lookupSvc.txt('email_txt')}}</label>  \\n                            <input #email=\\\"ngModel\\\" required id=\\\"email\\\" name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"personal.email\\\" pInputText>\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"personalForm.submitted && email.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>                                      \\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"country\\\">{{lookupSvc.txt('country_text')}}/{{lookupSvc.txt('region_text')}}</label>\\n                                <div class=\\\"group selectOtn\\\"> \\n                                    <select class=\\\"form-control\\\" required name=\\\"country\\\" #country=\\\"ngModel\\\" [(ngModel)]=\\\"personal.country\\\" required=\\\"true\\\">\\n                                         <option class=\\\"option\\\" value=\\\"0\\\" disabled=\\\"true\\\" selected=\\\"true\\\">Select country</option>\\n                                        <option class=\\\"option\\\"\\n                                            *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrCountry')\\\"\\n                                            [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                    </select>\\n                                </div>\\n                            <div class=\\\"alert alert-danger\\\" \\n                                  *ngIf=\\\"personalForm.submitted && country.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    \\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"identificationNumber\\\">\\n                            {{lookupSvc.txt('identification_number_txt')}}</label>  \\n                            <input #identificationNumber=\\\"ngModel\\\" required id=\\\"identificationNumber\\\" name=\\\"identificationNumber\\\" type=\\\"text\\\" placeholder=\\\"Indentification\\\" [(ngModel)]=\\\"personal.identificationNumber\\\" pInputText>\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"personalForm.submitted && identificationNumber.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"highestEducation\\\">\\n                            {{lookupSvc.txt('highest_education_txt')}}</label>  \\n                            <div class=\\\"group selectOtn\\\"> \\n                                <select class=\\\"form-control\\\" required name=\\\"highestEducation\\\" #highestEducation=\\\"ngModel\\\" [(ngModel)]=\\\"personal.highestEducation\\\" required=\\\"true\\\">\\n                                     <option class=\\\"option\\\" value=\\\"0\\\" disabled=\\\"true\\\" selected=\\\"true\\\">Select education</option>\\n                                    <option class=\\\"option\\\"\\n                                        *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrEducation')\\\"\\n                                        [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                </select>\\n                            </div>\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"personalForm.submitted && highestEducation.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"dob\\\">\\n                            {{lookupSvc.txt('dob_txt')}}</label>  \\n                              <input type=\\\"date\\\" \\n                                     id=\\\"dob\\\" \\n                                     name=\\\"dob\\\" \\n                                     #dob=\\\"ngModel\\\"\\n                                     required\\n                                     [(ngModel)]=\\\"personal.dob\\\">\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"personalForm.submitted && dob.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-xs-12 col-sm-6'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"dobPlace\\\"> {{lookupSvc.txt('pob_country_txt')}}</label>\\n                                <div class=\\\"group selectOtn\\\"> \\n                                    <select class=\\\"form-control\\\" required name=\\\"dobPlace\\\" #dobPlace=\\\"ngModel\\\" [(ngModel)]=\\\"personal.dobPlace\\\" required=\\\"true\\\">\\n                                         <option class=\\\"option\\\" value=\\\"0\\\" disabled=\\\"true\\\" selected=\\\"true\\\">Select country</option>\\n                                        <option class=\\\"option\\\"\\n                                            *ngFor=\\\"let g of lookupSvc.getAttributeValues('attrCountry')\\\"\\n                                            [ngValue]=\\\"g.id\\\" >{{g.name}}</option>\\n                                    </select>\\n                                </div>\\n                            <div class=\\\"alert alert-danger\\\" \\n                                  *ngIf=\\\"personalForm.submitted && dobPlace.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                    <div class='col-md-12'>\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"control-label\\\" for=\\\"address\\\"> {{lookupSvc.txt('address_txt')}}</label>\\n                              <textarea rows=\\\"3\\\" id=\\\"address\\\" #address=\\\"ngModel\\\" cols=\\\"30\\\" name=\\\"address\\\" [(ngModel)]=\\\"personal.address\\\" required=\\\"true\\\" autoResize=\\\"autoResize\\\" style=\\\"resize: none;width:100%;padding:10px\\\" placeholder=\\\"Address\\\"></textarea>\\n                            <div class=\\\"alert alert-danger\\\" \\n                                  *ngIf=\\\"personalForm.submitted && address.invalid\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"email\\\" style=\\\"margin-right: 35px\\\">{{lookupSvc.txt('permanent_resident_txt')}}</label>\\n                    <div class=\\\"mr-2\\\" style=\\\"display: inline-block;\\\">\\n                        <p-radioButton name=\\\"residence\\\" value=\\\"1\\\" label=\\\"Yes\\\" [(ngModel)]=\\\"personal.isPermanentAddress\\\">\\n                        </p-radioButton> \\n                    </div>\\n                   <div class=\\\"mr-2\\\" style=\\\"display: inline-block;\\\">\\n                        <p-radioButton name=\\\"residence\\\" value=\\\"0\\\" [(ngModel)]=\\\"personal.isPermanentAddress\\\" label=\\\"No\\\">\\n                        </p-radioButton> \\n                   </div>\\n \\n                </div>\\n                <div class=\\\"form-group text-center\\\">\\n                    <button class=\\\"primary\\\"  (click)=\\\"goToNext(personalForm)\\\"> Next <span style=\\\"margin-left:10px;\\\" class=\\\"glyphicon glyphicon-arrow-right\\\"></span></button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</form>\"","export default \"<form #selectAccountForm=\\\"ngForm\\\" class=\\\"editForm\\\" novalidate>\\n    <div class=\\\"tab-pane active\\\">\\n        <h4 class=\\\"head text-center\\\">{{title}}</h4>\\n        <br/>\\n        <div class='row'>\\n            <div class='col-md-12'>\\n              <div class=\\\"row\\\">\\n                 <div class='col-md-12'>\\n                  <div class=\\\"form-group\\\">\\n                       <label class=\\\"control-label\\\" for=\\\"securitiesAccount\\\">\\n                       {{lookupSvc.txt('securities_account_txt')}} </label> \\n                     <p-checkbox name=\\\"securitiesAccount\\\" *ngFor=\\\"let item of lookupSvc.getAttributeValues('attrSecuritiesAccount')\\\" \\n                     [value]=\\\"item.id\\\" [label]=\\\"item.name\\\" [(ngModel)]=\\\"selectedSecuritiesAccount\\\" (onChange)=\\\"selectAccount.securitiesAccount=selectedSecuritiesAccount.toString()\\\" ></p-checkbox>\\n                    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"selectAccountForm.submitted && selectedSecuritiesAccount.length==0\\\">*Required</div>\\n                   </div>\\n                </div>\\n              </div>\\n                <div class=\\\"row\\\">\\n                    <div class='col-md-12'>\\n                        <div class=\\\"form-group\\\">\\n                             <label class=\\\"control-label\\\" for=\\\"fundAccount\\\">\\n                               {{lookupSvc.txt('found_account_txt')}}</label> \\n                              <p-checkbox name=\\\"fundAccount\\\" *ngFor=\\\"let item of lookupSvc.getAttributeValues('attrFoundAccount')\\\" \\n                               [value]=\\\"item.id\\\" [label]=\\\"item.name\\\" [(ngModel)]=\\\"selectedFundAccount\\\" (onChange)=\\\"selectAccount.fundAccount=selectedFundAccount.toString()\\\"></p-checkbox>\\n                            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"selectAccountForm.submitted && selectedFundAccount.length==0\\\">*Required</div>\\n                        </div>\\n                    </div>\\n                </div>\\n                  <div class=\\\"row\\\" *ngIf=\\\"showSaveErrored\\\">\\n                      <div class='col-md-12'>\\n                          <div class=\\\"form-group\\\">\\n                           <div class=\\\"alert alert-danger\\\">\\n                              <div *ngIf=\\\"errors.length > 0 then errorList else errorGeneric\\\"></div>\\n\\n                              <ng-template #errorList>\\n                                  <ul>\\n                                      <li *ngFor=\\\"let error of errors\\\">{{error}}</li>\\n                                  </ul>\\n                              </ng-template>\\n\\n                              <ng-template #errorGeneric>\\n                                  <li *ngFor=\\\"let error of errors\\\">{{error}}</li>\\n                              </ng-template>\\n                          </div>\\n                  </div>\\n                </div>\\n              </div>\\n                <div class=\\\"form-group text-center\\\">\\n                   <button class=\\\"primary actionnext\\\" style=\\\"width: 50%\\\" (click)=\\\"goToPrevious(selectAccountForm)\\\"> <span  class=\\\"glyphicon glyphicon-arrow-left\\\"></span> Previous</button>\\n                    <button class=\\\"primary\\\"  (click)=\\\"submitForm(selectAccountForm)\\\"> Submit <span style=\\\"margin-left:10px;\\\" class=\\\"glyphicon glyphicon-arrow-right\\\"></span></button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</form>\"","export class FormData {\n    //personal info (step: 1)\n    chineseName: string = '';\n    englishName: string = '';\n    country : number = 1;  \n    identificationNumber: string = '';\n    gender: number = 1;\n    email: string = '';\n    highestEducation: number = 1;\n    dob: string = '';\n    dobPlace: number = 1;\n    address: string;\n    isPermanentAddress: number = 1; //default\n\n    //employment nature (step: 2)\n    professionalStatus: number = 1;\n    companyName : string = '';\n    carrerPosition: string = '';\n    bussinessNature: number = 1;\n\n    //Financial and Investment status (step: 3)\n     //financial\n    annualIncome: number = 1;\n    totalNetAssets: number = 1;\n    sourceOfFunds: number = 1;\n    investmentKnowledge: number = 1;\n    investmentObjective: number = 1;\n    frequencyOfTransaction: number = 1;\n    riskTolerance: number = 1;\n     //investment\n    stock: number = 1;\n    structuredProduct: number = 1;\n    foreignCurrency: number = 1;\n    warrants: number = 1;\n    futures: number = 1;\n    other: number = 1;\n    derivativesTrading: number = 1;\n    \n    //other disclosure (step: 4)\n    otherInformation: string = '';\n    taxInformation: number = 1;\n    taxCountry: number = 1;\n    taxId: string = '';\n    w8benCountry: number = 1;\n\n    //select account (step: 5)\n    securitiesAccount: string = '';\n    fundAccount: string = '';\n\n\n    clear() {\n\n        this.chineseName = '';\n        this.country  = 1;\n        this.isPermanentAddress = 1;\n        this.englishName = '';\n        this.gender = 1;\n        this.email = '';\n        this.highestEducation = 1;\n        this.dob = '';\n        this.dobPlace = 1;\n        this.address = '';\n        this.identificationNumber = '';\n\n        this.professionalStatus = 1;\n        this.companyName  = '';\n        this.carrerPosition = '';\n        this.bussinessNature = 1;\n\n        this.annualIncome = 1;\n        this.totalNetAssets = 1;\n        this.sourceOfFunds = 1;\n        this.investmentKnowledge = 1;\n        this.investmentObjective = 1;\n        this.frequencyOfTransaction = 1;\n        this.riskTolerance = 1;\n        this.stock = 1;\n        this.structuredProduct = 1;\n        this.foreignCurrency = 1;\n        this.warrants = 1;\n        this.futures = 1;\n        this.other = 1;\n        this.derivativesTrading = 1;\n\n        this.otherInformation = '';\n        this.taxInformation = 1;\n        this.taxCountry = 1;\n        this.taxId = '';\n        this.w8benCountry = 1;\n        \n        this.securitiesAccount = '';\n        this.fundAccount = '';\n\n    }\n}\n\n//step: 1\nexport class Personal {\n    chineseName: string = '';\n    englishName: string = '';\n    country : number = 1;  \n    identificationNumber: string = '';\n    gender: number = 1;\n    email: string = '';\n    highestEducation: number = 1;\n    dob: string = '';\n    dobPlace: number = 1;\n    address: string;\n    isPermanentAddress: number = 1; //default\n\n}\n\n//step: 2\nexport class EmploymentStatus {\n    professionalStatus: number = 1;\n    companyName : string = '';\n    carrerPosition: string = '';\n    bussinessNature: number = 1;\n}\n\n//step: 3\nexport class FinancialAndInvestment {\n    //financial\n    annualIncome: number = 1;\n    totalNetAssets: number = 1;\n    sourceOfFunds: number = 1;\n    investmentKnowledge: number = 1;\n    investmentObjective: number = 1;\n    frequencyOfTransaction: number = 1;\n    riskTolerance: number = 1;\n    //investment\n    stock: number = 1;\n    structuredProduct: number = 1;\n    foreignCurrency: number = 1;\n    warrants: number = 1;\n    futures: number = 1;\n    other: number = 1;\n    derivativesTrading: number = 1;\n}\n\n//step: 4\nexport class OtherDisclosure {\n     otherInformation: string = '';\n     taxInformation: number = 1;\n     taxCountry: number = 1;\n     taxId: string = '';\n     w8benCountry: number = 1;\n\n}\n\n//step: 5\nexport class SelectAccount {\n      securitiesAccount: string = '';\n      fundAccount: string = '';\n}\n\n","import { Injectable } from '@angular/core';\n\nimport { \n   FormData,\n   Personal, \n   EmploymentStatus,\n   FinancialAndInvestment,\n   OtherDisclosure,\n   SelectAccount \n    }   from './formData.model';\n\nimport { WorkflowService } from '../workflow/workflow.service';\n\nimport { STEPS } from '../workflow/workflow.model';\n\n@Injectable()\nexport class FormDataService {\n\n    private formData: FormData = new FormData();\n    private isPersonalFormValid: boolean = false;\n    private isEmploymentStatusFormValid: boolean = false;\n    private isFinancialAndInvestmentFormValid: boolean = false;\n    private isDisclosureFormValid: boolean = false;\n    private isAccountSelectionFormValid: boolean = false;\n    private isUploadFormValid: boolean = false;\n\n    constructor(private workflowService: WorkflowService) { \n    }\n\n    //Personal Information\n    getPersonal(): Personal {\n        var personal: Personal = {\n            chineseName: this.formData.chineseName,\n            englishName: this.formData.englishName,\n            country : this.formData.country,\n            identificationNumber: this.formData.identificationNumber,\n            gender: this.formData.gender,\n            email: this.formData.email,\n            highestEducation: this.formData.highestEducation,\n            dob: this.formData.dob,\n            dobPlace: this.formData.dobPlace,\n            address: this.formData.address,\n            isPermanentAddress: this.formData.isPermanentAddress\n\n        };\n        return personal;\n    }\n\n    setPersonal(data: Personal) {\n        this.isPersonalFormValid = true;\n        this.formData.chineseName = data.chineseName;\n        this.formData.country = data.country;\n        this.formData.isPermanentAddress = data.isPermanentAddress;\n        this.formData.englishName = data.englishName;\n        this.formData.identificationNumber = data.identificationNumber;\n        this.formData.gender = data.gender;\n        this.formData.email = data.email;\n        this.formData.highestEducation = data.highestEducation;\n        this.formData.dob = data.dob;\n        this.formData.dobPlace = data.dobPlace;\n        this.formData.address = data.address;\n        this.workflowService.validateStep(STEPS.personal);\n    }\n\n    //Employment status\n    getEmploymentStatus(): EmploymentStatus {\n        var employmentStatus: EmploymentStatus = {\n            professionalStatus: this.formData.professionalStatus,\n            companyName : this.formData.companyName,\n            carrerPosition: this.formData.carrerPosition,\n            bussinessNature: this.formData.bussinessNature,\n        };\n        return employmentStatus;\n    }\n\n    setEmploymentStatus(data: EmploymentStatus) {\n        this.isEmploymentStatusFormValid = true;\n        this.formData.professionalStatus = data.professionalStatus;\n        this.formData.companyName = data.companyName;\n        this.formData.carrerPosition = data.carrerPosition;\n        this.formData.bussinessNature = data.bussinessNature;\n\n        this.workflowService.validateStep(STEPS.employmentStatus);\n    }\n\n    //Financial and Investment experties\n    getFinancialAndInvestmentStatus(): FinancialAndInvestment {\n        var investmentExperience: FinancialAndInvestment = {\n            annualIncome: this.formData.annualIncome,\n            totalNetAssets: this.formData.totalNetAssets,\n            sourceOfFunds: this.formData.sourceOfFunds,\n            investmentKnowledge: this.formData.investmentKnowledge,\n            investmentObjective: this.formData.investmentObjective,\n            frequencyOfTransaction: this.formData.frequencyOfTransaction,\n            riskTolerance: this.formData.riskTolerance,\n            stock: this.formData.stock,\n            structuredProduct: this.formData.structuredProduct,\n            foreignCurrency: this.formData.foreignCurrency,\n            warrants: this.formData.warrants,\n            futures: this.formData.futures,\n            other: this.formData.other,\n            derivativesTrading: this.formData.derivativesTrading\n        };\n        return investmentExperience;\n    }\n\n    setFinancialAndInvestmentStatus(data: FinancialAndInvestment) {\n        this.isFinancialAndInvestmentFormValid = true;\n        this.formData.annualIncome = data.annualIncome;\n        this.formData.totalNetAssets = data.totalNetAssets;\n        this.formData.sourceOfFunds = data.sourceOfFunds;\n        this.formData.investmentKnowledge = data.investmentKnowledge;\n        this.formData.investmentObjective = data.investmentObjective;\n        this.formData.frequencyOfTransaction = data.frequencyOfTransaction;\n        this.formData.riskTolerance = data.riskTolerance;\n        this.formData.stock = data.stock;\n        this.formData.structuredProduct = data.structuredProduct;\n        this.formData.foreignCurrency = data.foreignCurrency;\n        this.formData.warrants = data.warrants;\n        this.formData.futures = data.futures;\n        this.formData.other = data.other;\n        this.formData.derivativesTrading = data.derivativesTrading;\n        this.workflowService.validateStep(STEPS.financialAndInvestmentStatus);\n    }\n\n    //Disclosure\n    getOtherDisclosure(): OtherDisclosure {\n        var otherDisclosure: OtherDisclosure = {\n             otherInformation: this.formData.otherInformation,\n             taxInformation: this.formData.taxInformation,\n             taxCountry: this.formData.taxCountry,\n             taxId: this.formData.taxId,\n             w8benCountry: this.formData.w8benCountry\n        };\n        return otherDisclosure;\n    }\n\n    setOtherDisclosure(data: OtherDisclosure) {\n        this.isDisclosureFormValid = true;\n        this.formData.otherInformation = data.otherInformation;\n        this.formData.taxInformation = data.taxInformation;\n        this.formData.taxCountry = data.taxCountry;\n        this.formData.taxId = data.taxId;\n        this.formData.w8benCountry = data.w8benCountry;\n        this.workflowService.validateStep(STEPS.otherDisclosure);\n    }\n\n    //Select Account\n    getSelectAccount(): SelectAccount {\n        var selectAccount: SelectAccount = {\n            securitiesAccount: this.formData.securitiesAccount,\n            fundAccount : this.formData.fundAccount\n        };\n        return selectAccount;\n    }\n\n    setSelectAccount(data: SelectAccount) {\n        this.isAccountSelectionFormValid = true;\n        this.formData.securitiesAccount = data.securitiesAccount;\n        this.formData.fundAccount = data.fundAccount;\n        this.workflowService.validateStep(STEPS.selectAccount);\n    }\n\n\n    getFormData(): FormData {\n        // Return the entire Form Data\n        return this.formData;\n    }\n\n    resetFormData(): FormData {\n        // Reset the workflow\n        this.workflowService.resetSteps();\n        // Return the form data after all this.* members had been reset\n        this.formData.clear();\n        this.isPersonalFormValid = false;\n        this.isEmploymentStatusFormValid = false;\n        this.isFinancialAndInvestmentFormValid = false;\n        this.isDisclosureFormValid = false;\n        this.isAccountSelectionFormValid = false;\n        return this.formData;\n    }\n\n    isFormValid() {\n        // Return true if all forms had been validated successfully; otherwise, return false\n        return this.isPersonalFormValid &&\n                this.isEmploymentStatusFormValid && \n                this.isFinancialAndInvestmentFormValid &&\n                this.isDisclosureFormValid &&\n                this.isAccountSelectionFormValid\n    }\n}\n","import { Component, OnInit, Input }   from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { EmploymentStatus }            from '../data/formData.model';\nimport { FormDataService }     from '../data/formData.service';\nimport { LookupService }       from '../../../../shared/services/lookup.service';\n@Component ({\n    selector:     'employment-status'\n    ,templateUrl: './employment-status.component.html',\n    styleUrls: ['../../style.less']\n})\n\nexport class EmploymentStatusComponent implements OnInit {\n    title = 'Employment Status';\n    employmentStatus: EmploymentStatus;\n    form: any;\n    constructor(private router: Router, private route: ActivatedRoute,\n    private lookupSvc: LookupService, private formDataService: FormDataService) {\n    }\n\n    ngOnInit() {\n        window.scrollTo(0, 200);\n        this.employmentStatus = this.formDataService.getEmploymentStatus();\n    }\n\n    save(form: any): boolean {\n        if (!form.valid) {\n            return false;\n        }\n            \n        this.formDataService.setEmploymentStatus(this.employmentStatus);\n        return true;\n    }\n    \n    goToPrevious(form: any) {\n        //if (this.save(form)) {\n            // Navigate to the personal page\n            this.router.navigate(['../personal'],{relativeTo: this.route});\n        //}\n    }\n\n    goToNext(form: any) {\n        if (this.save(form)) {\n            // Navigate to the next page\n            this.router.navigate(['../financialAndInvestmentStatus'],{relativeTo: this.route});\n        }\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter }   from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { FinancialAndInvestment }            from '../data/formData.model';\nimport { FormDataService }     from '../data/formData.service';\nimport { LookupService }       from '../../../../shared/services/lookup.service';\n\n@Component ({\n    selector:     'financial-investment-status'\n    ,templateUrl: './financial-investment-status.component.html',\n    styleUrls: ['../../style.less']\n})\n\nexport class FinancialInvestmentComponent implements OnInit {\n    title = 'Financial and investment status';\n    investmentExperience: FinancialAndInvestment;\n    form: any;\n    sourceOfFunds: number[] = [];\n    constructor(private router: Router, private route: ActivatedRoute,\n    private lookupSvc: LookupService, private formDataService: FormDataService) {\n    }\n\n    ngOnInit() {\n        window.scrollTo(0, 200);\n        this.investmentExperience = this.formDataService.getFinancialAndInvestmentStatus();\n    }\n\n    save(form: any): boolean {\n        if (!form.valid) {\n            return false;\n        }\n\n        if(this.sourceOfFunds.length == 0){\n           return false;\n        }\n            \n        this.formDataService.setFinancialAndInvestmentStatus(this.investmentExperience);\n        return true;\n        \n    }\n\n     goToPrevious(form: any) {\n        //if (this.save(form)) {\n            // Navigate to the prev page\n            this.router.navigate(['../employmentStatus'],{relativeTo: this.route});\n        //}\n    }\n\n    goToNext(form: any) {\n        if (this.save(form)) {\n            // Navigate to the next page\n            this.router.navigate(['../otherDisclosure'],{relativeTo: this.route});\n        }\n    }\n}\n","import { Component, OnInit, Input }   from '@angular/core';\r\nimport { Subscription, ISubscription } from 'rxjs/Subscription';\r\n\r\nimport { FormDataService }            from './data/formData.service';\r\nimport { ProgressLoadingService } from '../../../shared/services/loading-response-progress.service';\r\n@Component ({\r\n    selector:     'multi-step-wizard-app'\r\n    ,templateUrl: './margin-account-form.component.html',\r\n    styleUrls: ['../style.less']\r\n})\r\n\r\nexport class MarginAccountFormComponent implements OnInit {\r\n    title = 'Multi-Step Wizard';\r\n    @Input() formData;\r\n    private responseProgressSub: ISubscription;\r\n    isResponseLoaded: boolean = true;\r\n    constructor(private formDataService: FormDataService,private responseProgress: ProgressLoadingService) {\r\n      this.responseProgressSub = this.responseProgress.progressResponse$.subscribe(res => {\r\n            this.isResponseLoaded = res;\r\n            \r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.formData = this.formDataService.getFormData();\r\n        console.log(this.title + ' loaded!');\r\n    }\r\n\r\n\r\n    ngOnDestroy() {\r\n        this.responseProgressSub.unsubscribe();\r\n    }\r\n}","import { NgModule }           from '@angular/core';\r\nimport { FormsModule }        from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NavbarComponent }    from './navbar/navbar.component';\r\nimport { SharedModule } from '../../../shared/shared.module';\r\n\r\n/* Feature Components */\r\nimport { PersonalComponent }  from './personal/personal.component';\r\nimport { EmploymentStatusComponent } from './employment-status/employment-status.component';\r\nimport { FinancialInvestmentComponent } from './financial-investment-status/financial-investment-status.component';\r\nimport { OtherDisclosureComponent } from './other-disclosure/other-disclosure.component';\r\nimport { SelectAccountComponent } from './select-account/select-account.component';\r\nimport { MarginAccountFormComponent } from './margin-account-form.component';\r\n/* Routing Module */\r\nimport { MarginAccountFormRoutingModule }   from './margin-account-form.routing';\r\n\r\nimport { FormDataService }    from './data/formData.service';\r\nimport { WorkflowService }    from './workflow/workflow.service';\r\nimport { MarginAccountService } from './margin-account.service';\r\n@NgModule({\r\n    imports:[ \r\n            FormsModule,\r\n            MarginAccountFormRoutingModule,\r\n            CommonModule,\r\n            SharedModule\r\n          ],\r\n    declarations: [ \r\n            MarginAccountFormComponent,\r\n            NavbarComponent,\r\n            PersonalComponent,\r\n            EmploymentStatusComponent,\r\n            FinancialInvestmentComponent,\r\n            OtherDisclosureComponent,\r\n            SelectAccountComponent\r\n         ],\r\n    providers:[\r\n        FormDataService,\r\n        WorkflowService,\r\n        MarginAccountService\r\n        ]   \r\n})\r\n\r\nexport class MarginAccountFormModule {}","import { NgModule }             from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { PersonalComponent }    from './personal/personal.component';\r\nimport { EmploymentStatusComponent } from './employment-status/employment-status.component';\r\nimport { FinancialInvestmentComponent } from './financial-investment-status/financial-investment-status.component';\r\nimport { OtherDisclosureComponent } from './other-disclosure/other-disclosure.component';\r\nimport { SelectAccountComponent } from './select-account/select-account.component';\r\nimport { MarginAccountFormComponent } from './margin-account-form.component';\r\nimport { WorkflowGuard }        from './workflow/workflow-guard.service';\r\nimport { WorkflowService }      from './workflow/workflow.service';\r\n\r\n\r\nexport const appRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: MarginAccountFormComponent,\r\n        children: [{\r\n          path: '',\r\n          children: [\r\n            { path: '', redirectTo: 'personal', pathMatch: 'full' },\r\n            {  path: 'personal', component: PersonalComponent },\r\n            {  path: 'employmentStatus', component: EmploymentStatusComponent, canActivate: [WorkflowGuard] },\r\n            {  path: 'financialAndInvestmentStatus', component: FinancialInvestmentComponent, canActivate: [WorkflowGuard] },\r\n            {  path: 'otherDisclosure', component: OtherDisclosureComponent, canActivate: [WorkflowGuard] },\r\n            {  path: 'selectAccount', component: SelectAccountComponent, canActivate: [WorkflowGuard] }\r\n          ]\r\n        }]\r\n      }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(appRoutes)],\r\n  exports: [RouterModule],\r\n  providers: [WorkflowGuard]\r\n})\r\n\r\nexport class MarginAccountFormRoutingModule {}","import { Injectable } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { HttpClient, HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';\r\nimport { SiteApiResponseUtilities } from '../../../shared/services/SiteApiResponse';\r\nimport { Personal,\r\n         EmploymentStatus,\r\n         FinancialAndInvestment,\r\n         OtherDisclosure,\r\n         SelectAccount\r\n            } from './data/formData.model';\r\n@Injectable()\r\nexport class MarginAccountService {\r\n  \r\n  private respUtils = new SiteApiResponseUtilities();\r\n\r\n  constructor(private http: HttpClient){}\r\n  \r\n  accountOpening(personal: Personal, \r\n                 employmentStatus: EmploymentStatus, \r\n                 financialAndInvestmentStatus: FinancialAndInvestment, \r\n                 otherDisclosure: OtherDisclosure, \r\n                 selectAccount: SelectAccount ) {\r\n     const url = environment.endpoints.client_account.openAccount;\r\n     let body = new URLSearchParams();\r\n     body.set('account_type', 'margin');\r\n     //personal info\r\n     body.set('name_english', personal.englishName);\r\n     body.set('name_chinese', personal.chineseName);\r\n     body.set('gender_id', personal.gender.toString());\r\n     body.set('email', personal.email);\r\n     body.set('dob', personal.dob);\r\n     body.set('place_of_birth_country_id', personal.dobPlace.toString()); \r\n     body.set('highest_education_id', personal.highestEducation.toString());           \r\n     body.set('identification_country_id', personal.country.toString());\r\n     body.set('address', personal.address);\r\n     body.set('identification_number', personal.identificationNumber.toString());\r\n     body.set('is_permanent_resident', personal.isPermanentAddress.toString());\r\n\r\n     //employment status\r\n     body.set('professional_status_id', employmentStatus.professionalStatus.toString());\r\n     body.set('company_name', employmentStatus.companyName);\r\n     body.set('career_position', employmentStatus.carrerPosition);\r\n     body.set('business_nature_id', employmentStatus.bussinessNature.toString());\r\n     //Financial and Investment experience\r\n     body.set('annual_income_id', financialAndInvestmentStatus.annualIncome.toString());\r\n     body.set('total_net_asset_value_id', financialAndInvestmentStatus.totalNetAssets.toString());\r\n     body.set('sources_of_found_ids', financialAndInvestmentStatus.sourceOfFunds.toString());\r\n     body.set('investment_knowledge_id', financialAndInvestmentStatus.investmentKnowledge.toString());\r\n     body.set('investment_objective_id', financialAndInvestmentStatus.investmentObjective.toString());\r\n     body.set('frequency_of_transactions_per_month_id', financialAndInvestmentStatus.frequencyOfTransaction.toString());\r\n     body.set('risk_tolerance_id', financialAndInvestmentStatus.riskTolerance.toString());\r\n\r\n     body.set('stock_experience_id', financialAndInvestmentStatus.stock.toString());\r\n     body.set('structured_product_experience_id', financialAndInvestmentStatus.structuredProduct.toString());\r\n     body.set('foreign_currency_gold_experience_id', financialAndInvestmentStatus.foreignCurrency.toString());\r\n     body.set('warrants_experience_id', financialAndInvestmentStatus.warrants.toString());\r\n     body.set('futures_options_experience_id', financialAndInvestmentStatus.futures.toString());\r\n     body.set('other_experience_id', financialAndInvestmentStatus.other.toString());\r\n     body.set('derivatives_trading_id', financialAndInvestmentStatus.derivativesTrading.toString());\r\n     //other disclosure\r\n     body.set('other_information_disclosure_ids', otherDisclosure.otherInformation.toString());\r\n     body.set('tax_information_id', otherDisclosure.taxInformation.toString());\r\n     body.set('tax_country_id', otherDisclosure.taxCountry.toString());\r\n     body.set('tax_id', otherDisclosure.taxId);\r\n     body.set('w8ben_country_id', otherDisclosure.w8benCountry.toString());\r\n     //select account\r\n     body.set('securities_account_ids', selectAccount.securitiesAccount);\r\n     body.set('found_account_ids', selectAccount.fundAccount);\r\n     return this.http\r\n        .post(url, body.toString(), {\r\n          headers: new HttpHeaders()\r\n            .set('Content-Type', 'application/x-www-form-urlencoded')\r\n        })\r\n        .map(r => r)\r\n        .catch(r => this.respUtils.onServiceError(r));\r\n  }\r\n}","import { Component } from '@angular/core';\n\n@Component ({\n    selector: 'msw-navbar'\n    ,templateUrl: './navbar.component.html',\n    styleUrls: ['../../style.less']\n})\n\nexport class NavbarComponent {}","import { Component, OnInit }   from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { OtherDisclosure }            from '../data/formData.model';\nimport { FormDataService }     from '../data/formData.service';\nimport { LookupService }       from '../../../../shared/services/lookup.service';\n@Component ({\n    selector:     'other-disclosure'\n    ,templateUrl: './other-disclosure.component.html',\n    styleUrls: ['../../style.less']\n})\n\nexport class OtherDisclosureComponent implements OnInit {\n    title = 'Other Information';\n    otherDisclosure: OtherDisclosure;\n    form: any;\n    selectedTaxInformation: any;\n    selectedTaxCountry: any;\n    selectedW8benCountry: any;\n    selectedDisclosureValues: number[] = [];\n    constructor(private router: Router, private route: ActivatedRoute,\n    private lookupSvc: LookupService, private formDataService: FormDataService) {\n    }\n\n    ngOnInit() {\n        window.scrollTo(0, 200);\n        this.otherDisclosure = this.formDataService.getOtherDisclosure();\n    }\n\n    save(form: any): boolean {\n        if (!form.valid) {\n            return false;\n        }\n        if(this.selectedDisclosureValues.length==0){\n           return false;\n        }    \n        this.formDataService.setOtherDisclosure(this.otherDisclosure);\n        return true;\n    }\n    \n    goToPrevious(form: any) {\n        //if (this.save(form)) {\n            // Navigate to the prev page\n            this.router.navigate(['../financialAndInvestmentStatus'],{relativeTo: this.route});\n        //}\n    }\n    goToNext(form: any) {\n        if (this.save(form)) {\n            // Navigate to the next page\n            this.router.navigate(['../selectAccount'],{relativeTo: this.route});\n        }\n    }\n}\n","import { Component, OnInit, Input }   from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Personal }            from '../data/formData.model';\nimport { FormDataService }     from '../data/formData.service';\nimport { LookupService }       from '../../../../shared/services/lookup.service';\nimport { ProfileService } from '../../../../shared/services/profile.service'; \nimport { ErrorDialogService } from '../../../../shared/dialogs/error-dialog/dialog.service';\nimport { ErrorDialog } from '../../../../shared/dialogs/error-dialog/models';\n@Component ({\n    selector:     'personal'\n    ,templateUrl: './personal.component.html',\n    styleUrls: ['../../style.less']\n})\n\nexport class PersonalComponent implements OnInit {\n    title = 'Personal Information';\n    personal: Personal;\n    form: any;\n\n    constructor(private router: Router, private route: ActivatedRoute,\n    private lookupSvc: LookupService, private formDataService: FormDataService,\n    private profileSvc: ProfileService, private errorDialogSvc: ErrorDialogService) {\n    }\n\n    ngOnInit() {\n        window.scrollTo(0, 200);\n        this.personal = this.formDataService.getPersonal();\n         if (this.profileSvc.hasMarginAccount){\n            let err = new ErrorDialog();\n            err.title = 'Error';\n            err.message = \"Oops! Margin account aleady exist.\"\n            err.isPublic = false;\n            this.errorDialogSvc.showDialog(err);\n            return false;\n        }\n    }\n\n    save(form: any): boolean {\n        if (!form.valid) {\n            return false;\n        }\n            \n        this.formDataService.setPersonal(this.personal);\n        return true;\n    }\n\n    goToNext(form: any) {\n        if (this.save(form)) {\n            // Navigate to the work page\n            this.router.navigate(['../employmentStatus'],{relativeTo: this.route});\n        }\n    }\n}\n","import { Component, OnInit, Input }   from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ISiteApiResponse, SiteApiResponseUtilities } from '../../../../shared/services/SiteApiResponse';\nimport {\n         FormData,\n         Personal,\n         EmploymentStatus,\n         FinancialAndInvestment,\n         OtherDisclosure,\n         SelectAccount\n     }  from '../data/formData.model';\n\nimport { FormDataService }     from '../data/formData.service';\nimport { LookupService }       from '../../../../shared/services/lookup.service';\nimport { MarginAccountService } from '../margin-account.service';\nimport { ProgressLoadingService } from '../../../../shared/services/loading-response-progress.service';\nimport { SuccessDialogService } from '../../../../shared/dialogs/success-dialog/dialog.service';\nimport { SuccessDialog } from '../../../../shared/dialogs/success-dialog/models';\n\n@Component ({\n    selector:     'select-account'\n    ,templateUrl: './select-account.component.html',\n    styleUrls: ['../../style.less']\n})\n\nexport class SelectAccountComponent implements OnInit {\n    title = 'Select an account to open';\n    personal: Personal;\n    employmentStatus: EmploymentStatus;\n    financialAndInvestmentStatus: FinancialAndInvestment;\n    otherDisclosure: OtherDisclosure;\n    selectAccount: SelectAccount;\n    isFormValid: boolean = false;\n    form: any;\n    selectedSecuritiesAccount: number[] = [];\n    selectedFundAccount: number[] = [];\n    public showSaveErrored: boolean;\n    public errors: string[] = [];\n    private respUtils = new SiteApiResponseUtilities();\n    constructor(private router: Router, private route: ActivatedRoute,\n    private lookupSvc: LookupService, private formDataService: FormDataService,\n    private marginAccountSvc: MarginAccountService, private responseProgress: ProgressLoadingService,\n    private successDialogSvc: SuccessDialogService) {\n\n    }\n\n    ngOnInit() {\n        window.scrollTo(0, 200);\n        this.selectAccount = this.formDataService.getSelectAccount();\n        console.log('EmploymentStatus feature loaded!');\n    }\n\n    save(form: any): boolean {\n        if (!form.valid) {\n            return false;\n        }\n        if(this.selectedSecuritiesAccount.length==0 || this.selectedFundAccount.length==0){\n           return false;\n        }   \n        this.formDataService.setSelectAccount(this.selectAccount);\n        return true;\n    }\n\n    goToPrevious(form: any) {\n        //if (this.save(form)) {\n            // Navigate to the prev page\n            this.router.navigate(['../otherDisclosure'],{relativeTo: this.route});\n        //}\n    }\n    submitForm(form: any) {\n        if (this.save(form)) {\n            this.personal = this.formDataService.getPersonal();\n            this.employmentStatus = this.formDataService.getEmploymentStatus();\n            this.financialAndInvestmentStatus = this.formDataService.getFinancialAndInvestmentStatus();\n            this.otherDisclosure = this.formDataService.getOtherDisclosure();\n            this.selectAccount = this.formDataService.getSelectAccount();\n            this.isFormValid = this.formDataService.isFormValid();\n            if(this.isFormValid){\n               this.responseProgress.progressResponse(true);\n               this.marginAccountSvc.\n                    accountOpening(this.personal,\n                                this.employmentStatus,\n                                this.financialAndInvestmentStatus,\n                                this.otherDisclosure,\n                                this.selectAccount).subscribe(res=>{\n                                    console.log(res);\n                                 this.onSaveSuccess();\n                               }, err => {\n                                  console.log(err);\n                                 this.onSaveError(err);\n                                })\n            }\n        }\n    }\n\n    private onSaveSuccess() {\n        let successDialog = new SuccessDialog();\n        this.showSaveErrored = false;\n        this.errors = [];\n        this.responseProgress.progressResponse(false);\n        successDialog.title = 'Success';\n        successDialog.message = 'Congratulation! Your document submitted successfully. Under review';\n        successDialog.isPublic = false;\n        this.successDialogSvc.showDialog(successDialog);\n        //this.router.navigate(['../../'],{relativeTo: this.route});\n        \n    }\n\n    private onSaveError(error = null) {\n        if (typeof (error) === \"string\") {\n            this.errors.push(error);\n        } else {\n            if (error) {\n                this.errors = this.respUtils.getErrors(error);\n            }\n        }\n        this.responseProgress.progressResponse(false);\n        this.showSaveErrored = true;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n    CanActivate, Router,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    CanLoad, Route\n} from '@angular/router';\n\nimport { WorkflowService } from './workflow.service';\n\n@Injectable()\nexport class WorkflowGuard implements CanActivate {\n    public profileSysId: any;\n    constructor(private router: Router, private workflowService: WorkflowService) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        let path: string = route.routeConfig.path;\n        this.profileSysId = parseInt(route.paramMap.get('profileSysId'));\n        return this.verifyWorkFlow(path);\n    }\n\n    verifyWorkFlow(path) : boolean {\n        console.log(\"Entered '\" + path + \"' path.\");\n        \n        // If any of the previous steps is invalid, go back to the first invalid step\n        let firstPath = this.workflowService.getFirstInvalidStep(path);\n        if (firstPath.length > 0) {\n            console.log(\"Redirected to '\" + firstPath + \"' path which it is the first invalid step.\");\n            let url = `profile/${this.profileSysId}/account-opening/margin/${firstPath}`;\n            this.router.navigate([url]);\n            return false;\n        };\n\n        return true;\n    }\n}\n\n\n","export const STEPS = {\n    personal: 'personal',\n    employmentStatus: 'employmentStatus',\n    financialAndInvestmentStatus: 'financialAndInvestmentStatus',\n    otherDisclosure: 'otherDisclosure',\n    selectAccount: 'selectAccount'\n}\n","import { Injectable }         from '@angular/core';\n\nimport { STEPS }              from './workflow.model';\n\n@Injectable()\nexport class WorkflowService {\n    private workflow = [\n        { step: STEPS.personal, valid: false },\n        { step: STEPS.employmentStatus, valid: false },\n        { step: STEPS.financialAndInvestmentStatus, valid: false },\n        { step: STEPS.otherDisclosure, valid: false },\n        { step: STEPS.selectAccount, valid: false }\n    ];\n    \n    validateStep(step: string) {\n        // If the state is found, set the valid field to true \n        var found = false;\n        for (var i = 0; i < this.workflow.length && !found; i++) {\n            if (this.workflow[i].step === step) {\n                found = this.workflow[i].valid = true;\n            }\n        }\n    }\n\n    resetSteps() {\n        // Reset all the steps in the Workflow to be invalid\n        this.workflow.forEach(element => {\n            element.valid = false;\n        });\n    }\n\n    getFirstInvalidStep(step: string) : string {\n        // If all the previous steps are validated, return blank\n        // Otherwise, return the first invalid step\n        var found = false;\n        var valid = true;\n        var redirectToStep = '';\n        for (var i = 0; i < this.workflow.length && !found && valid; i++) {\n            let item = this.workflow[i];\n            if (item.step === step) {\n                found = true;\n                redirectToStep = '';\n            }\n            else {\n                valid = item.valid;\n                redirectToStep = item.step\n            }\n        }\n        return redirectToStep;\n    }\n}"],"sourceRoot":"webpack:///"}